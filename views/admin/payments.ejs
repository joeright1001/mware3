<!DOCTYPE html>
<html>
<head>
  <title>Payments Admin Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <style>
    body, html {
      margin: 0;
      padding: 0;
      width: 100%;
    }
    
    .container-fluid {
      padding-left: 5%;
      padding-right: 5%;
      width: 100%;
      max-width: 100%;
    }
    
    .table-responsive { overflow-x: auto; }
    
    /* Status colors */
    .status-completed { color: green; font-weight: bold; }
    .status-pending { color: orange; }
    .status-failed, .status-error { color: red; }
    .status-success { color: green; font-weight: bold; }
    .status-expired { color: #dc3545; }
    
    .filter-form { margin-bottom: 20px; }
    .filter-section { 
      margin-bottom: 15px; 
      padding: 10px 15px;
      background-color: #f8f9fa;
      border-radius: 6px;
    }
    
    .checkbox-group { 
      display: flex; 
      gap: 15px; 
      flex-wrap: wrap; 
      margin-top: 5px;
    }
    
    /* Customer info formatting */
    .customer-info { display: flex; flex-direction: column; }
    .customer-detail { margin-bottom: 2px; }
    .customer-email { font-weight: bold; }
    .customer-phone { color: #6c757d; }
    
    /* Order number styling */
    .order-number { font-weight: bold; color: #0d6efd; }
    
    /* Status badges */
    .status-badge {
      padding: 3px 8px;
      border-radius: 12px;
      font-size: 0.8rem;
      font-weight: 500;
      display: inline-block;
      margin-bottom: 3px;
    }
    .badge-completed { background-color: #d1e7dd; color: #0f5132; }
    .badge-pending { background-color: #fff3cd; color: #664d03; }
    .badge-failed, .badge-error { background-color: #f8d7da; color: #842029; }
    .badge-expired { background-color: #f8d7da; color: #842029; }
    .badge-success { background-color: #d1e7dd; color: #0f5132; }
    
    /* Reviewed status styles */
    .reviewed-yes { 
      background-color: #d1e7dd; 
      color: #0f5132;
      border-radius: 12px;
      padding: 3px 8px;
      font-size: 0.8rem;
    }
    .reviewed-no { 
      background-color: #e2e3e5; 
      color: #41464b;
      border-radius: 12px;
      padding: 3px 8px;
      font-size: 0.8rem;
    }
    
    /* Button styling */
    .action-btn {
      white-space: nowrap;
      width: auto;
      min-width: 90px;
    }
    
    /* Export CSV section */
    .export-section {
      background-color: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 20px;
    }
    
    .date-range-picker {
      display: flex;
      gap: 10px;
      align-items: center;
      margin-bottom: 10px;
    }
    
    .export-btn {
      margin-top: 10px;
    }
    
    /* Section styling */
    .filter-section-header {
      font-weight: bold;
      margin-bottom: 8px;
      color: #495057;
    }
    
    /* Status filter sections */
    .status-filter-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
    }
    
    .status-filter-section {
      flex: 1;
      min-width: 280px;
    }
    
    /* Responsive design */
    @media (max-width: 768px) {
      .checkbox-group { flex-wrap: wrap; }
      th, td { font-size: 0.85rem; }
      .container-fluid {
        padding-left: 15px;
        padding-right: 15px;
      }
      .date-range-picker {
        flex-direction: column;
        align-items: stretch;
      }
      .status-filter-container {
        flex-direction: column;
        gap: 10px;
      }
    }
  </style>
</head>
<body>
  <div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h1>Payments Dashboard</h1>
      <button class="btn btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#exportSection">
        Export CSV
      </button>
    </div>
    
    <!-- CSV Export Section (Collapsible) -->
    <div class="collapse mb-4" id="exportSection">
      <div class="export-section">
        <h5>Export Payment Data as CSV</h5>
        <form id="exportForm" action="/admin/export-csv" method="GET">
          <div class="row">
            <div class="col-md-5">
              <label class="form-label">Start Date</label>
              <input type="date" class="form-control" id="startDate" name="startDate" required>
            </div>
            <div class="col-md-5">
              <label class="form-label">End Date</label>
              <input type="date" class="form-control" id="endDate" name="endDate" required>
            </div>
            <div class="col-md-2 d-flex align-items-end">
              <button type="submit" class="btn btn-primary w-100">Export</button>
            </div>
          </div>
        </form>
      </div>
    </div>
    
    <!-- Filter Form -->
    <div class="card mb-4">
      <div class="card-body">
        <form class="filter-form" method="GET" id="filterForm">
          <div class="row g-3">
            <div class="col-md-3">
              <label class="form-label">Search (Email/Phone)</label>
              <input type="text" class="form-control" name="search" value="<%= search %>" placeholder="Search by email or phone">
            </div>
            <div class="col-md-3">
              <label class="form-label">Search Order Number</label>
              <input type="text" class="form-control" name="searchTO" value="<%= searchTO %>" placeholder="Search TO-xxxx">
            </div>
            <div class="col-md-3">
              <label class="form-label">Provider</label>
              <select class="form-select" name="provider">
                <option value="">All Providers</option>
                <option value="POLi" <% if (provider === 'POLi') { %>selected<% } %>>POLi</option>
                <option value="STRIPE" <% if (provider === 'STRIPE') { %>selected<% } %>>Stripe</option>
                <option value="BLINK" <% if (provider === 'BLINK') { %>selected<% } %>>Blink</option>
                <option value="BTCPAY" <% if (provider === 'BTCPAY') { %>selected<% } %>>BTCPay</option>
                <option value="ALIPAY" <% if (provider === 'ALIPAY') { %>selected<% } %>>Alipay</option>
              </select>
            </div>
            <div class="col-md-3">
              <label class="form-label">Reviewed Status</label>
              <select class="form-select" name="reviewedFilter">
                <option value="all" <% if (reviewedFilter === 'all') { %>selected<% } %>>All</option>
                <option value="yes" <% if (reviewedFilter === 'yes') { %>selected<% } %>>Reviewed</option>
                <option value="no" <% if (reviewedFilter === 'no') { %>selected<% } %>>Not Reviewed</option>
              </select>
            </div>
          </div>
          
          <!-- Status Filters -->
          <div class="filter-section mt-4">
            <div class="status-filter-container">
              <!-- Payment Status (status_pay) Section -->
              <div class="status-filter-section">
                <div class="filter-section-header">Status Pay:</div>
                <div class="checkbox-group">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="statusPayFilter" value="completed" id="statusCompleted" 
                      <% if (statusPayFilter && statusPayFilter.includes('completed')) { %>checked<% } %>>
                    <label class="form-check-label status-completed" for="statusCompleted">Completed</label>
                  </div>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="statusPayFilter" value="pending" id="statusPending"
                      <% if (statusPayFilter && statusPayFilter.includes('pending')) { %>checked<% } %>>
                    <label class="form-check-label status-pending" for="statusPending">Pending</label>
                  </div>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="statusPayFilter" value="failed" id="statusFailed"
                      <% if (statusPayFilter && statusPayFilter.includes('failed')) { %>checked<% } %>>
                    <label class="form-check-label status-failed" for="statusFailed">Failed</label>
                  </div>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="statusPayFilter" value="error" id="statusError"
                      <% if (statusPayFilter && statusPayFilter.includes('error')) { %>checked<% } %>>
                    <label class="form-check-label status-error" for="statusError">Error</label>
                  </div>
                </div>
              </div>
              
              <!-- URL Status (status_url) Section -->
              <div class="status-filter-section">
                <div class="filter-section-header">Status URL:</div>
                <div class="checkbox-group">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="statusUrlFilter" value="success" id="statusUrlSuccess"
                      <% if (statusUrlFilter && statusUrlFilter.includes('success')) { %>checked<% } %>>
                    <label class="form-check-label status-success" for="statusUrlSuccess">Success</label>
                  </div>
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="statusUrlFilter" value="expired" id="statusUrlExpired"
                      <% if (statusUrlFilter && statusUrlFilter.includes('expired')) { %>checked<% } %>>
                    <label class="form-check-label status-expired" for="statusUrlExpired">Expired</label>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="d-flex justify-content-end mt-3">
            <button type="submit" class="btn btn-primary">Apply Filters</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Results Table -->
    <div class="card">
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-striped table-hover">
            <thead>
              <tr>
                <th>ID</th>
                <th>Date</th>
                <th>Order</th>
                <th>Customer Name</th>
                <th>Customer Email</th>
                <th>Phone</th>
                <th>Provider</th>
                <th>Amount</th>
                <th>Status Pay</th>
                <th>Status URL</th>
                <th>Reviewed</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="paymentsTableBody">
              <% if (payments && payments.length > 0) { %>
                <% payments.forEach(payment => { %>
                  <tr data-payment-id="<%= payment.record_id %>">
                    <td><%= payment.record_id %></td>
                    <td><%= new Date(payment.created_at).toLocaleString() %></td>
                    <td>
                      <% if (payment.trade_order) { %>
                        <a href="/admin/order/<%= payment.trade_order %>" class="order-number" title="View Order Details"><%= payment.trade_order %></a>
                      <% } else { %>
                        <span class="text-muted">N/A</span>
                      <% } %>
                    </td>
                    <td>
                      <%= payment.first_name_order || '' %> <%= payment.last_name_order || '' %>
                    </td>
                    <td><%= payment.email_order || '' %></td>
                    <td><%= payment.phone_order || '' %></td>
                    <td><%= payment.provider %></td>
                    <td>$<%= parseFloat(payment.amount || 0).toFixed(2) %></td>
                    <td>
                      <span class="status-badge badge-<%= (payment.status_pay || 'pending').toLowerCase() %>">
                        <%= payment.status_pay || 'pending' %>
                      </span>
                    </td>
                    <td>
                      <% if (payment.status_url) { %>
                        <span class="status-badge badge-<%= (payment.status_url).toLowerCase() %>">
                          <%= payment.status_url %>
                        </span>
                      <% } else { %>
                        <span class="text-muted">N/A</span>
                      <% } %>
                    </td>
                    <td class="reviewed-status">
                      <% if (payment.reviewed === 'yes' || payment.reviewed === 'Yes') { %>
                        <span class="reviewed-yes">Yes</span>
                      <% } else { %>
                        <span class="reviewed-no">No</span>
                      <% } %>
                    </td>
                    <td>
                      <div class="btn-group" role="group">
                        <% if (payment.payment_url) { %>
                          <a href="<%= payment.payment_url %>" target="_blank" class="btn btn-sm btn-outline-primary action-btn">View</a>
                        <% } %>
                        <button class="btn btn-sm <%= (payment.reviewed === 'yes' || payment.reviewed === 'Yes') ? 'btn-success' : 'btn-outline-secondary' %> action-btn mark-reviewed-btn" 
                                onclick="markReviewed(<%= payment.record_id %>)"
                                <%= (payment.reviewed === 'yes' || payment.reviewed === 'Yes') ? 'disabled' : '' %>>
                          <%= (payment.reviewed === 'yes' || payment.reviewed === 'Yes') ? 'Reviewed' : 'Review' %>
                        </button>
                      </div>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="12" class="text-center">No payments found</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
        
        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center mt-3">
          <div>
            Showing <%= payments.length %> of <%= totalPayments %> payments
          </div>
          <nav aria-label="Page navigation">
            <ul class="pagination">
              <% if (page > 1) { %>
                <li class="page-item">
                  <a class="page-link" href="?page=<%= page-1 %>&limit=<%= limit %>&search=<%= search %>&searchTO=<%= searchTO %>&provider=<%= provider %>&reviewedFilter=<%= reviewedFilter %><% if (statusPayFilter && statusPayFilter.length > 0) { statusPayFilter.forEach(status => { %>&statusPayFilter=<%= status %><% })} %><% if (statusUrlFilter && statusUrlFilter.length > 0) { statusUrlFilter.forEach(status => { %>&statusUrlFilter=<%= status %><% })} %>">Previous</a>
                </li>
              <% } %>
              
              <% for(let i = Math.max(1, page-2); i <= Math.min(totalPages, page+2); i++) { %>
                <li class="page-item <%= i === page ? 'active' : '' %>">
                  <a class="page-link" href="?page=<%= i %>&limit=<%= limit %>&search=<%= search %>&searchTO=<%= searchTO %>&provider=<%= provider %>&reviewedFilter=<%= reviewedFilter %><% if (statusPayFilter && statusPayFilter.length > 0) { statusPayFilter.forEach(status => { %>&statusPayFilter=<%= status %><% })} %><% if (statusUrlFilter && statusUrlFilter.length > 0) { statusUrlFilter.forEach(status => { %>&statusUrlFilter=<%= status %><% })} %>"><%= i %></a>
                </li>
              <% } %>
              
              <% if (page < totalPages) { %>
                <li class="page-item">
                  <a class="page-link" href="?page=<%= page+1 %>&limit=<%= limit %>&search=<%= search %>&searchTO=<%= searchTO %>&provider=<%= provider %>&reviewedFilter=<%= reviewedFilter %><% if (statusPayFilter && statusPayFilter.length > 0) { statusPayFilter.forEach(status => { %>&statusPayFilter=<%= status %><% })} %><% if (statusUrlFilter && statusUrlFilter.length > 0) { statusUrlFilter.forEach(status => { %>&statusUrlFilter=<%= status %><% })} %>">Next</a>
                </li>
              <% } %>
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script>
    // Initialize date pickers
    document.addEventListener('DOMContentLoaded', function() {
      // Set default dates (current month)
      const today = new Date();
      const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
      
      document.getElementById('startDate').valueAsDate = firstDay;
      document.getElementById('endDate').valueAsDate = today;
      
      // Handle export form submission
      document.getElementById('exportForm').addEventListener('submit', function(e) {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        
        if (!startDate || !endDate) {
          e.preventDefault();
          alert('Please select both start and end dates');
          return false;
        }
        
        if (new Date(startDate) > new Date(endDate)) {
          e.preventDefault();
          alert('Start date must be before end date');
          return false;
        }
        
        // Form is valid, will submit normally
      });
    });
    
    // Function to mark payment as reviewed
    function markReviewed(paymentId) {
      const btn = event.target;
      btn.disabled = true;
      btn.textContent = 'Updating...';
      
      // Log debugging info
      console.log(`Marking payment ID ${paymentId} as reviewed`);
      
      fetch(`/admin/api/mark-reviewed/${paymentId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      })
        .then(response => {
          console.log('Response status:', response.status);
          return response.json();
        })
        .then(data => {
          console.log('Response data:', data);
          
          if (data.success) {
            // Update the button and status cell
            btn.textContent = 'Reviewed';
            btn.classList.add('btn-success');
            btn.classList.remove('btn-outline-secondary');
            
            // Update the reviewed status cell
            const row = document.querySelector(`tr[data-payment-id="${paymentId}"]`);
            const reviewedCell = row.querySelector('.reviewed-status');
            reviewedCell.innerHTML = '<span class="reviewed-yes">Yes</span>';
          } else {
            alert('Error: ' + (data.error || 'Unknown error'));
            btn.disabled = false;
            btn.textContent = 'Review';
          }
        })
        .catch(error => {
          console.error('Fetch error:', error);
          alert('Error marking as reviewed: ' + error);
          btn.disabled = false;
          btn.textContent = 'Review';
        });
    }
    
    // Auto-refresh dashboard every 30 seconds
    function refreshDashboard() {
      console.log("Refreshing dashboard data...");
      
      // Get current filter parameters
      const formData = new FormData(document.getElementById('filterForm'));
      const params = new URLSearchParams(formData);
      
      fetch(`/admin/payments/data?${params.toString()}`)
        .then(response => response.json())
        .then(data => {
          if (data && data.success && data.payments && data.payments.length > 0) {
            updateTable(data.payments);
          }
        })
        .catch(error => console.error('Error refreshing dashboard:', error));
    }
    
    function updateTable(payments) {
      const tableBody = document.getElementById('paymentsTableBody');
      
      // Update existing rows and add new ones
      payments.forEach(payment => {
        const existingRow = document.querySelector(`tr[data-payment-id="${payment.record_id}"]`);
        
        if (existingRow) {
          // Update status cells
          updateRowData(existingRow, payment);
        } else {
          // Create new row for new payment
          const newRow = document.createElement('tr');
          newRow.setAttribute('data-payment-id', payment.record_id);
          
          // Determine status classes
          const statusPayClass = `badge-${(payment.status_pay || 'pending').toLowerCase()}`;
          const statusUrlClass = payment.status_url ? `badge-${payment.status_url.toLowerCase()}` : '';
          const reviewedStatus = payment.reviewed === 'yes' || payment.reviewed === 'Yes';
          
          newRow.innerHTML = `
            <td>${payment.record_id}</td>
            <td>${new Date(payment.created_at).toLocaleString()}</td>
            <td>
              ${payment.trade_order ? 
                `<a href="/admin/order/${payment.trade_order}" class="order-number" title="View Order Details">${payment.trade_order}</a>` : 
                `<span class="text-muted">N/A</span>`}
            </td>
            <td>${payment.first_name_order || ''} ${payment.last_name_order || ''}</td>
            <td>${payment.email_order || ''}</td>
            <td>${payment.phone_order || ''}</td>
            <td>${payment.provider}</td>
            <td>$${parseFloat(payment.amount || 0).toFixed(2)}</td>
            <td>
              <span class="status-badge ${statusPayClass}">
                ${payment.status_pay || 'pending'}
              </span>
            </td>
            <td>
              ${payment.status_url ? 
                `<span class="status-badge ${statusUrlClass}">${payment.status_url}</span>` : 
                `<span class="text-muted">N/A</span>`}
            </td>
            <td class="reviewed-status">
              ${reviewedStatus ? 
                `<span class="reviewed-yes">Yes</span>` : 
                `<span class="reviewed-no">No</span>`}
            </td>
            <td>
              <div class="btn-group" role="group">
                ${payment.payment_url ? 
                  `<a href="${payment.payment_url}" target="_blank" class="btn btn-sm btn-outline-primary action-btn">View</a>` : ''}
                <button class="btn btn-sm ${reviewedStatus ? 'btn-success' : 'btn-outline-secondary'} action-btn mark-reviewed-btn" 
                        onclick="markReviewed(${payment.record_id})"
                        ${reviewedStatus ? 'disabled' : ''}>
                  ${reviewedStatus ? 'Reviewed' : 'Review'}
                </button>
              </div>
            </td>
          `;
          
          // Add new row at the top
          if (tableBody.firstChild) {
            tableBody.insertBefore(newRow, tableBody.firstChild);
          } else {
            tableBody.appendChild(newRow);
          }
        }
      });
    }
    
    function updateRowData(row, payment) {
      // Update status_pay cell
      const statusPayCell = row.querySelector('td:nth-child(9)');
      if (statusPayCell) {
        const statusPayClass = `badge-${(payment.status_pay || 'pending').toLowerCase()}`;
        statusPayCell.innerHTML = `
          <span class="status-badge ${statusPayClass}">
            ${payment.status_pay || 'pending'}
          </span>
        `;
      }
      
      // Update status_url cell
      const statusUrlCell = row.querySelector('td:nth-child(10)');
      if (statusUrlCell) {
        if (payment.status_url) {
          const statusUrlClass = `badge-${payment.status_url.toLowerCase()}`;
          statusUrlCell.innerHTML = `
            <span class="status-badge ${statusUrlClass}">
              ${payment.status_url}
            </span>
          `;
        } else {
          statusUrlCell.innerHTML = '<span class="text-muted">N/A</span>';
        }
      }
      
      // Update reviewed cell
      const reviewedCell = row.querySelector('.reviewed-status');
      if (reviewedCell) {
        const reviewedStatus = payment.reviewed === 'yes' || payment.reviewed === 'Yes';
        reviewedCell.innerHTML = reviewedStatus ? 
          '<span class="reviewed-yes">Yes</span>' : 
          '<span class="reviewed-no">No</span>';
      }
      
      // Update reviewed button
      const reviewedBtn = row.querySelector('.mark-reviewed-btn');
      if (reviewedBtn) {
        const reviewedStatus = payment.reviewed === 'yes' || payment.reviewed === 'Yes';
        
        if (reviewedStatus) {
          reviewedBtn.textContent = 'Reviewed';
          reviewedBtn.classList.add('btn-success');
          reviewedBtn.classList.remove('btn-outline-secondary');
          reviewedBtn.disabled = true;
        } else {
          reviewedBtn.textContent = 'Review';
          reviewedBtn.classList.remove('btn-success');
          reviewedBtn.classList.add('btn-outline-secondary');
          reviewedBtn.disabled = false;
        }
      }
    }
    
    // Set up refresh interval
    setInterval(refreshDashboard, 30000); // Refresh every 30 seconds
  </script>
</body>
</html>