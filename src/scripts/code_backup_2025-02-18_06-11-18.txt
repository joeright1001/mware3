Code Output Generated at UTC: 2025-02-18_06-11-18
Generated by: codespace
----------------------------------------

=== Directory Structure ===
.
├── config
│   ├── cors.js
│   └── database.js
├── routes
│   └── public
│       ├── orders.js
│       └── payments.js
├── scripts
│   ├── code_backup_2025-02-18_01-24-55.txt
│   ├── code_backup_2025-02-18_06-11-18.txt
│   ├── delete_old_code_backup_files.sh
│   ├── project_code_output.sh
│   └── sql_script.sql
└── services
    ├── orders
    │   └── orderService.js
    ├── payments
    │   ├── blinkService.js
    │   ├── paymentService.js
    │   └── poliService.js
    └── pdf
        └── pdfService.js

8 directories, 14 files
----------------------------------------

=== Database Schema ===
Attempting to connect to database...

=== Table: orders ===
----------------------------------------

=== Table: payments ===
----------------------------------------
----------------------------------------

=== File: /workspaces/mware3/server.js ===
/**
 * Main Application Entry Point
 * --------------------------
 * Purpose: Initializes and configures the Express application
 * Role: Sets up middleware, routes, and starts the server
 * 
 * Key Components:
 * 1. Environment variables loading
 * 2. CORS configuration
 * 3. Route registration
 * 4. Server initialization
 * 
 * Dependencies:
 * - dotenv for environment variables
 * - express for web server
 * - cors for Cross-Origin Resource Sharing
 * 
 * IMPORTANT CONFIGURATIONS:
 * - PORT in .env file (defaults to 3000)
 * - Ensure all required environment variables are set in .env:
 *   - DATABASE_URL
 *   - JWT_SECRET
 *   - PORT (optional)
 */

require("dotenv").config();
const express = require("express");
const cors = require("cors");

// Import configurations
const corsOptions = require('./src/config/cors');

// Import routes
const orderRoutes = require('./src/routes/public/orders');
const paymentRoutes = require('./src/routes/public/payments'); // Add this line

// Debug: Log environment variables
console.log('Environment:', {
    PORT: process.env.PORT,
    DATABASE_URL: process.env.DATABASE_URL ? 'Set' : 'Not Set',
    JWT_SECRET: process.env.JWT_SECRET ? 'Set' : 'Not Set',
    POLI_AUTH_CODE: process.env.POLI_AUTH_CODE ? 'Set' : 'Not Set'
});

// Debug: Log configurations
console.log('Loaded configurations:', {
    corsOptions,
    orderRoutes: typeof orderRoutes,
    paymentRoutes: typeof paymentRoutes
});

const app = express();

// Trust proxy setting for rate limiting
app.set('trust proxy', 1);

// Middleware
app.use(cors(corsOptions));
app.use(express.json());

console.log('Middleware initialized');

// Routes
app.use("/", orderRoutes);      // Base URL for order routes
app.use("/api", paymentRoutes); // Payment status endpoint

// Error handling middleware
app.use((err, req, res, next) => {
    console.error('Global error:', err);
    res.status(500).json({ error: "Server error" });
});

// ⚠️ CONFIGURE: Server port
const PORT = process.env.PORT || 3000;

// CRITICAL: Create server this way to handle shutdown
const server = app.listen(PORT, () => {
    console.log(`🚀 Server running on port ${PORT}`);
});

// Graceful Shutdown Handler
function gracefulShutdown() {
    console.log('Received kill signal, shutting down gracefully');
    server.close(() => {
        console.log('Closed out remaining connections');
        process.exit(0);
    });
    
    // Force close after 10 seconds
    setTimeout(() => {
        console.error('Could not close connections in time, forcefully shutting down');
        process.exit(1);
    }, 10000);
}

// Handle shutdown signals
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// Add basic health check endpoint
app.get('/health', (req, res) => {
    res.json({ status: 'ok', timestamp: new Date().toISOString() });
});----------------------------------------

=== File: /workspaces/mware3/.env ===
# Database Configuration
DATABASE_URL=postgres://postgres:********@localhost:5432/railway_dev

# Security
JWT_SECRET=**********************

# POLi Payment Integration
POLI_AUTH_CODE=**********************
POLI_API_URL=https://poliapi.uat3.paywithpoli.com/api/POLiLink/Create

# CORS Configuration
CORS_ORIGIN=https://gold-buyers-christchurch.webflow.io

# Database Connection Details (extracted from DATABASE_URL)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=railway_dev
DB_USER=postgres
DB_PASSWORD=********

BLINK_CLIENT_ID=uJlIlsU0bLYc86N3zBpZZqpptgdlZ5sk
BLINK_CLIENT_SECRET=1NrFAt_af5sLpP872qPrOU2Sz0-H91TDn4VAQagiFJCq0bmZOKGItXpVuKfgnuoy----------------------------------------
-e 
=== File: /workspaces/mware3/src/routes/public/orders.js
/**
 * Order Routes
 * -----------
 * Purpose: Defines all HTTP endpoints related to orders
 * Role: Handles HTTP requests and delegates business logic to OrderService
 * 
 * Current Endpoints:
 * POST /create - Creates a new order
 * 
 * Dependencies:
 * - OrderService for business logic
 * - Express Router for routing
 * 
 * Error Handling:
 * - 400 for validation errors
 * - 500 for server errors
 */

const express = require('express');
const router = express.Router();
const OrderService = require('../../services/orders/orderService');

router.post("/create", async (req, res) => {
    try {
        const result = await OrderService.createOrder(req.body);
        res.json(result);
    } catch (error) {
        console.error("Order creation error:", error);
        res.status(error.message.includes("required") ? 400 : 500)
           .json({ error: error.message || "Failed to create order" });
    }
});

module.exports = router;----------------------------------------
-e 
=== File: /workspaces/mware3/src/routes/public/payments.js
/**
 * Payment Routes
 * -------------
 * Purpose: Handles payment status checking endpoints
 * Role: Provides API for checking payment URL status
 * 
 * Endpoints:
 * GET /api/payment-status/:token - Check payment URL status
 * 
 * Dependencies:
 * - PaymentService for business logic
 * - Express Router for routing
 * 
 * Error Handling:
 * - 400 for validation errors
 * - 500 for server errors
 */

const express = require('express');
const router = express.Router();
const PaymentService = require('../../services/payments/paymentService');
const rateLimit = require('express-rate-limit');

// Rate limiting: 60 requests per minute
const statusLimiter = rateLimit({
    windowMs: 60 * 1000,
    max: 60,
    message: { error: 'Too many requests, please try again later' }
});

router.get("/payment-status/:token", statusLimiter, async (req, res) => {
    try {
        console.log(`Checking payment status for token: ${req.params.token}`);
        const result = await PaymentService.getStatusByToken(req.params.token);
        res.json(result);
    } catch (error) {
        console.error("Payment status check error:", error);
        res.status(400).json({ 
            error: error.message || "Failed to check payment status" 
        });
    }
});

module.exports = router;----------------------------------------
-e 
=== File: /workspaces/mware3/src/config/cors.js
/**
 * CORS Configuration
 * -----------------
 * Purpose: Defines Cross-Origin Resource Sharing (CORS) settings
 * Role: Controls which domains can access your API
 * 
 * IMPORTANT CONFIGURATION:
 * - origin: Change this URL when deploying to different environments
 * - methods: HTTP methods allowed
 * - allowedHeaders: Headers clients can send
 */

const corsOptions = {
    origin: process.env.CORS_ORIGIN,
    methods: "GET,POST,OPTIONS",
    allowedHeaders: "Content-Type",
    credentials: true
};

module.exports = corsOptions;----------------------------------------
-e 
=== File: /workspaces/mware3/src/config/database.js
/**
 * Database Configuration
 * ---------------------
 * Purpose: Centralizes database connection configuration
 * Role: Provides a single connection pool instance used throughout the application
 * 
 * Dependencies:
 * - pg (PostgreSQL client)
 * - DATABASE_URL environment variable
 * 
 * IMPORTANT CONFIGURATION:
 * The DATABASE_URL should be set in your .env file with format:
 * postgresql://username:password@host:port/database
 */

const { Pool } = require("pg");

const pool = new Pool({ 
    connectionString: process.env.DATABASE_URL 
});

module.exports = pool;----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/pdf/pdfService.js
/**
 * PDF Generation Service
 * ---------------------
 * Purpose: Handles PDF generation for order confirmations
 * Role: Creates PDFs from order data using Puppeteer
 * 
 * Dependencies:
 * - puppeteer for PDF generation
 * - Requires Chrome/Chromium to be installed in the environment
 */

const puppeteer = require('puppeteer');

class PDFService {
    async generateOrderPDF(orderData) {
        const browser = await puppeteer.launch({
            args: ['--no-sandbox', '--disable-setuid-sandbox'],
            headless: 'new'  // Using new headless mode
        });

        try {
            const page = await browser.newPage();
            
            // TODO: Replace with your actual order page URL
            // await page.goto('https://your-webflow-print-page-url');
            
            // TODO: Add logic to populate order data
            
            const pdf = await page.pdf({
                format: 'A4',
                printBackground: true
            });

            return pdf;
        } finally {
            await browser.close();
        }
    }
}

module.exports = new PDFService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/poliService.js
/**
 * POLi Payment Service Integration
 * 
 * This service handles the integration with POLi payment gateway for processing payments
 * in New Zealand. It provides functionality to generate payment links and handle payment
 * transactions through the POLi API.
 * 
 * Key Features:
 * - Generates payment links with 30-minute expiry
 * - Handles NZ timezone specific formatting
 * - Stores payment records in database
 * - Error handling and logging
 * 
 * Flow:
 * 1. Receives order data
 * 2. Generates expiry timestamp in NZ timezone
 * 3. Creates POLi API payload
 * 4. Makes API request to generate payment link
 * 5. Stores payment record in database
 * 
 * Requirements:
 * - POLi API credentials in environment variables
 * - PostgreSQL database connection
 * - Axios for HTTP requests
 */

const axios = require('axios');
const pool = require('../../config/database');

class PoliService {
    /**
     * Generates a payment link through POLi API
     * @param {Object} orderData - Contains order details including total_price and trade_order
     * @returns {String} Payment URL for redirect
     */
    async generatePaymentLink(orderData) {
        try {
            console.log('\n=== POLi Payment Processing ===');
            console.log('Generating POLi payment link for order:', orderData.trade_order);

            // Calculate expiry time 30 minutes from now
            const date = new Date();
            const futureDate = new Date(date.getTime() + (30 * 60 * 1000));
            
            // Format with New Zealand timezone (UTC+13)
            const formattedExpiry = futureDate.toLocaleString('en-NZ', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                timeZone: 'Pacific/Auckland',
                hour12: false
            }).replace(/(\d{2})\/(\d{2})\/(\d{4}), (\d{2}):(\d{2}):(\d{2})/, '$3-$2-$1T$4:$5:$6+13:00');

            console.log('POLi Generated Expiry Time:', formattedExpiry);

            // Construct payload for POLi API
            const payload = {
                LinkType: "0",
                Amount: orderData.total_price.toString(),
                MerchantReference: orderData.trade_order,
                LinkExpiry: formattedExpiry
            };

            console.log('POLi API Payload:', JSON.stringify(payload));

            // Make API request to POLi
            const response = await axios.post(
                process.env.POLI_API_URL,
                payload,
                {
                    headers: {
                        'Authorization': `Basic ${process.env.POLI_AUTH_CODE}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            // Process response and remove quotes
            const paymentUrl = response.data.replace(/"/g, '');
            console.log('POLi API Response:', paymentUrl);

            // Store successful payment record in database
            await pool.query(
                `INSERT INTO payments (order_record_id, provider, status, amount, payment_url) 
                 VALUES ($1, $2, $3, $4, $5)`,
                [orderData.record_id, 'POLi', 'success', orderData.total_price, paymentUrl]
            );

            return paymentUrl;

        } catch (error) {
            console.error('\n=== POLi API Error ===');
            console.error('Error details:', {
                message: error.message,
                response: error.response?.data,
                order: orderData.trade_order
            });
            
            // Store failed payment record in database
            await pool.query(
                `INSERT INTO payments (order_record_id, provider, status, amount, error_message) 
                 VALUES ($1, $2, $3, $4, $5)`,
                [orderData.record_id, 'POLi', 'failed', orderData.total_price, 
                 error.response?.data?.ErrorMessage || error.message]
            );
            throw error;
        }
    }
}

module.exports = new PoliService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/blinkService.js
/**
 * Blink Payment Service Integration
 * 
 * This service handles the integration with Blink Debit payment gateway.
 * Uses OAuth2 client credentials flow with API Key and Secret.
 */

const axios = require('axios');
const pool = require('../../config/database');

class BlinkService {
    constructor() {
        this.CLIENT_ID = process.env.BLINK_CLIENT_ID;
        this.CLIENT_SECRET = process.env.BLINK_CLIENT_SECRET;
        this.BASE_URL = 'https://sandbox.debit.blinkpay.co.nz/payments/v1';
        this.AUTH_URL = 'https://sandbox.debit.blinkpay.co.nz/oauth2/token';
        this.REDIRECT_URL = 'https://gold-buyers-christchurch.webflow.io/';
        this.accessToken = null;
        this.tokenExpiry = null;

        // Validate configuration
        if (!this.CLIENT_ID || !this.CLIENT_SECRET) {
            console.error('Missing Blink API credentials. Check environment variables.');
        }
    }

    async getAccessToken() {
        try {
            console.log('\n=== Blink Authentication ===');
            console.log('Requesting Blink access token...');
            
            const auth = Buffer.from(`${this.CLIENT_ID}:${this.CLIENT_SECRET}`).toString('base64');
            const response = await axios.post(
                this.AUTH_URL,
                'grant_type=client_credentials',
                {
                    headers: {
                        'Authorization': `Basic ${auth}`,
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                }
            );

            this.accessToken = response.data.access_token;
            this.tokenExpiry = Date.now() + (response.data.expires_in * 1000);
            
            console.log('Successfully obtained Blink access token');
            return this.accessToken;
        } catch (error) {
            console.error('Failed to get Blink access token:', error.response?.data || error.message);
            throw error;
        }
    }

    async ensureValidToken() {
        if (!this.accessToken || !this.tokenExpiry || Date.now() >= this.tokenExpiry - 60000) {
            await this.getAccessToken();
        }
        return this.accessToken;
    }

    async generatePaymentLink(orderData) {
        try {
            console.log('\n=== Blink Payment Processing ===');
            console.log('Generating Blink payment link for order:', orderData.trade_order);

            // Get valid access token
            const token = await this.ensureValidToken();

            const formattedAmount = typeof orderData.total_price === 'string' 
                ? parseFloat(orderData.total_price).toFixed(2)
                : orderData.total_price.toFixed(2);

            const payload = {
                flow: {
                    detail: {
                        type: "gateway",
                        redirect_uri: this.REDIRECT_URL,
                        flow_hint: {
                            type: "redirect",
                            bank: "ASB"
                        }
                    }
                },
                pcr: {
                    particulars: orderData.trade_order.substring(0, 12),
                    code: orderData.trade_order.substring(0, 12),
                    reference: orderData.record_id.toString()
                },
                amount: {
                    total: formattedAmount,
                    currency: "NZD"
                }
            };

            console.log('Blink API Payload:', JSON.stringify(payload));

            const response = await axios.post(
                `${this.BASE_URL}/quick-payments`,
                payload,
                {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    timeout: 10000
                }
            );

            console.log('Blink API Response:', response.data);

            if (response.data && response.data.redirect_uri) {
                await pool.query(
                    `INSERT INTO payments (order_record_id, provider, status, amount, payment_url) 
                     VALUES ($1, $2, $3, $4, $5)`,
                    [orderData.record_id, 'BLINK', 'success', formattedAmount, response.data.redirect_uri]
                );

                return response.data.redirect_uri;
            } else {
                throw new Error('No redirect_uri in response');
            }

        } catch (error) {
            console.error('\n=== Blink API Error ===');
            console.error('Error details:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status,
                headers: error.response?.headers,
                order: orderData.trade_order
            });
            
            await pool.query(
                `INSERT INTO payments (order_record_id, provider, status, amount, error_message) 
                 VALUES ($1, $2, $3, $4, $5)`,
                [orderData.record_id, 'BLINK', 'failed', orderData.total_price, 
                 error.response?.data?.detail || error.message]
            );
            
            console.error('Blink payment link generation failed for order:', orderData.trade_order);
        }
    }
}

module.exports = new BlinkService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/paymentService.js
/**
 * Payment Service
 * --------------
 * Purpose: Handles payment status checking
 * Role: Provides business logic for payment status
 * 
 * Key Functions:
 * - Check payment status by token
 * 
 * Dependencies:
 * - Database pool for queries
 * 
 * Updates:
 * - Modified query to prioritize successful payments
 * - Added provider information to response
 * - Maintains backward compatibility with existing features
 */

const pool = require('../../config/database');

class PaymentService {
    async getStatusByToken(token) {
        console.log('Checking payment status for token:', token);

        const query = `
            SELECT 
                p.payment_url,
                p.status,
                p.created_at,
                p.error_message,
                p.provider
            FROM payments p
            JOIN orders o ON o.record_id = p.order_record_id
            WHERE o.token = $1
            ORDER BY 
                p.status = 'success' DESC, -- Prioritize successful payments
                p.created_at DESC          -- Then by most recent
            LIMIT 1
        `;

        try {
            const result = await pool.query(query, [token]);
            console.log('Payment status result:', result.rows[0]);

            // If no payment record found
            if (!result.rows[0]) {
                return { 
                    status: 'pending',
                    message: 'Payment processing' 
                };
            }

            return {
                status: result.rows[0].status,
                payment_url: result.rows[0].payment_url,
                error_message: result.rows[0].error_message,
                provider: result.rows[0].provider,
                checked_at: new Date().toISOString()
            };

        } catch (error) {
            console.error('Database error in getStatusByToken:', error);
            throw new Error('Failed to check payment status');
        }
    }
}

module.exports = new PaymentService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/orders/orderService.js
/**
 * Order Service Module
 * ===================
 * This service handles the creation and management of orders in the system.
 * It provides functionality for:
 * - Generating unique trade order numbers
 * - Creating new orders with customer and product details
 * - Managing order transactions with database integration
 * - Generating payment links through payment providers
 * 
 * Key Requirements:
 * - PostgreSQL database connection
 * - JWT for token generation
 * - POLi payment service integration
 * - Blink payment service integration
 * - Environment variables for JWT secret
 * 
 * Flow:
 * 1. Generate unique trade order number
 * 2. Create order record in database
 * 3. Generate JWT token for order
 * 4. Initiate parallel payment link generation (async)
 *    - POLi payment processing
 *    - Blink payment processing
 */

const pool = require('../../config/database');
const jwt = require('jsonwebtoken');
const PoliService = require('../payments/poliService');
const BlinkService = require('../payments/blinkService');

class OrderService {
    /**
     * Generates the next sequential trade order number
     * Formats: "TO-XXXX" where XXXX is an incrementing number
     * Default starts at TO-2317 if no previous orders exist
     */
    async getNextTradeOrder() {
        const result = await pool.query("SELECT trade_order FROM orders ORDER BY record_id DESC LIMIT 1");

        // ⚠️ CONFIGURE: Change starting number if needed
        const DEFAULT_START = "TO-2317";

        if (result.rows.length === 0 || !result.rows[0].trade_order || result.rows[0].trade_order.trim() === "") {
            return DEFAULT_START;
        }

        const lastTradeOrder = result.rows[0].trade_order.trim();

        if (typeof lastTradeOrder === "string" && lastTradeOrder.startsWith("TO-")) {
            const lastNumber = parseInt(lastTradeOrder.replace("TO-", ""), 10);
            return `TO-${lastNumber + 1}`;
        }

        return DEFAULT_START;
    }

    /**
     * Creates a new order in the system
     * @param {Object} orderData - Contains all order details including customer info and product details
     * @returns {Object} Contains generated token and trade order number
     */
    async createOrder(orderData) {
        const {
            first_name_order, email_order, total_price, // Required fields
            last_name_order, phone_order, product_name_full, quantity, price_nzd,
            zoho_id, delivery, pay_in_person, checkbox_order, address, message,
            date_picker_order, time_picker_order
        } = orderData;

        // Input validation for required fields
        if (!first_name_order || !email_order || !total_price) {
            throw new Error("First name, email, and total price are required.");
        }

        const trade_order = await this.getNextTradeOrder();

        // Database transaction handling
        const client = await pool.connect();
        try {
            await client.query('BEGIN');

            // Generate JWT token for order tracking
            const token = jwt.sign(
                { trade_order, email_order, timestamp: Date.now() },
                process.env.JWT_SECRET || "default_secret",
                { expiresIn: "1h" }
            );

            // Insert order into database
            const orderResult = await client.query(
                `INSERT INTO orders (
                    trade_order, first_name_order, last_name_order, email_order, phone_order,
                    product_name_full, total_price, quantity, price_nzd, zoho_id, delivery,
                    pay_in_person, checkbox_order, address, message, token,
                    date_picker_order, time_picker_order
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18)
                RETURNING record_id, order_creation_time`,
                [
                    trade_order, first_name_order, last_name_order || null, email_order, phone_order || null,
                    product_name_full || null, total_price, quantity || null, price_nzd || null, zoho_id || null,
                    delivery || null, pay_in_person || null, checkbox_order || null, address || null,
                    message || null, token, date_picker_order || null, time_picker_order || null
                ]
            );

            await client.query('COMMIT');

            // Prepare order data for payment processing
            const orderWithId = {
                ...orderData,
                record_id: orderResult.rows[0].record_id,
                trade_order
            };

            // Before the return statement, format the timestamp
            const timestamp = orderResult.rows[0].order_creation_time;
            const formattedDate = new Date(timestamp).toLocaleString('en-NZ', {
                timeZone: 'Pacific/Auckland',
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            }).replace(/\//g, '-');

            // Asynchronously generate payment links
            this.generatePaymentLink(orderWithId);

            return { token, trade_order, order_creation_time: formattedDate };

        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * Generates payment links through multiple payment providers
     * Runs asynchronously to not block the order creation process
     * Handles both POLi and Blink payment processing in parallel
     * @param {Object} orderData - Complete order information including record_id
     */
    async generatePaymentLink(orderData) {
        try {
            console.log('\n=== Starting Payment Processing ===');
            console.log('Processing order:', orderData.trade_order);
            
            await Promise.all([
                (async () => {
                    try {
                        await PoliService.generatePaymentLink(orderData);
                    } catch (error) {
                        console.error('POLi processing failed:', error.message);
                    }
                })(),
                (async () => {
                    try {
                        await BlinkService.generatePaymentLink(orderData);
                    } catch (error) {
                        console.error('Blink processing failed:', error.message);
                    }
                })()
            ]);

            console.log('=== Payment Processing Complete ===\n');
        } catch (error) {
            console.error('Payment link generation failed:', error);
            // Don't throw - this is background processing
        }
    }
}

module.exports = new OrderService();----------------------------------------

=== File: package.json ===
{
  "name": "mware3",
  "version": "1.0.0",
  "description": "Middleware for Webflow Integration",
  "main": "server.js",
  "engines": {
    "node": "20.18.1"
  },
  "scripts": {
    "start": "node server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "middleware",
    "webflow",
    "nodejs"
  ],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "axios": "^1.3.4",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "express-rate-limit": "^7.5.0",
    "jsonwebtoken": "^9.0.0",
    "pg": "^8.10.0",
    "puppeteer": "^24.2.0"
    
  }
}


----------------------------------------
