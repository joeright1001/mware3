Code Output Generated at UTC: 2025-03-02_07-01-58
Generated by: codespace
----------------------------------------

=== Directory Structure ===
.
├── config
│   ├── cors.js
│   └── database.js
├── routes
│   ├── admin
│   │   └── dashboard.js
│   └── public
│       ├── orders.js
│       └── payments.js
├── scripts
│   ├── code_backup_2025-03-02_06-50-49.txt
│   ├── code_backup_2025-03-02_07-01-58.txt
│   ├── delete_old_code_backup_files.sh
│   ├── project_code_output.sh
│   ├── sql_script.sql
│   └── views
│       └── admin
│           ├── error.ejs
│           └── payments.ejs
└── services
    ├── expiry
    │   ├── expiryQueue.js
    │   ├── expiryService.js
    │   ├── providers
    │   │   └── blinkExpiry.js
    │   └── test-queue.js
    ├── orders
    │   └── orderService.js
    ├── payments
    │   ├── alipayService.js
    │   ├── blinkService.js
    │   ├── btcpayService.js
    │   ├── paymentService.js
    │   ├── paystatus
    │   │   ├── paymentStatusQueue.js
    │   │   ├── paymentStatusService.js
    │   │   └── providers
    │   │       ├── alipayPaymentStatus.js
    │   │       ├── btcpayPaymentStatus.js
    │   │       ├── poliPaymentStatus.js
    │   │       └── stripePaymentStatus.js
    │   ├── poliService.js
    │   └── stripeService.js
    └── pdf
        └── pdfService.js

15 directories, 30 files
----------------------------------------

=== Database Schema ===
Attempting to connect to database...

=== Table: payments ===
                                                                  Table "public.payments"
     Column      |            Type             | Collation | Nullable |                   Default                   | Storage  | Stats target | Description 
-----------------+-----------------------------+-----------+----------+---------------------------------------------+----------+--------------+-------------
 record_id       | integer                     |           | not null | nextval('payments_record_id_seq'::regclass) | plain    |              | 
 order_record_id | integer                     |           |          |                                             | plain    |              | 
 created_at      | timestamp without time zone |           |          | CURRENT_TIMESTAMP                           | plain    |              | 
 provider        | character varying(50)       |           | not null |                                             | extended |              | 
 amount          | numeric(10,2)               |           | not null |                                             | main     |              | 
 status_url      | text                        |           |          |                                             | extended |              | 
 message_url     | text                        |           |          |                                             | extended |              | 
 payment_url     | text                        |           |          |                                             | extended |              | 
 status_pay      | character varying(50)       |           |          |                                             | extended |              | 
 message_pay     | text                        |           |          |                                             | extended |              | 
 payid           | character varying(255)      |           |          |                                             | extended |              | 
 expires_at      | timestamp with time zone    |           |          |                                             | plain    |              | 
 status_expiry   | text                        |           |          |                                             | extended |              | 
Indexes:
    "payments_pkey" PRIMARY KEY, btree (record_id)
Referenced by:
    TABLE "expiry" CONSTRAINT "expiry_payments_record_id_fkey" FOREIGN KEY (payments_record_id) REFERENCES payments(record_id)
    TABLE "pay_status" CONSTRAINT "pay_status_payments_record_id_fkey" FOREIGN KEY (payments_record_id) REFERENCES payments(record_id)
Access method: heap

----------------------------------------

=== Table: pay_status ===
                                                                  Table "public.pay_status"
       Column       |           Type           | Collation | Nullable |                    Default                    | Storage  | Stats target | Description 
--------------------+--------------------------+-----------+----------+-----------------------------------------------+----------+--------------+-------------
 record_id          | integer                  |           | not null | nextval('pay_status_record_id_seq'::regclass) | plain    |              | 
 payments_record_id | integer                  |           | not null |                                               | plain    |              | 
 date_time          | timestamp with time zone |           | not null |                                               | plain    |              | 
 status             | text                     |           | not null |                                               | extended |              | 
 message            | text                     |           |          |                                               | extended |              | 
Indexes:
    "pay_status_pkey" PRIMARY KEY, btree (record_id)
Foreign-key constraints:
    "pay_status_payments_record_id_fkey" FOREIGN KEY (payments_record_id) REFERENCES payments(record_id)
Triggers:
    trg_update_pay_status AFTER INSERT OR UPDATE ON pay_status FOR EACH ROW EXECUTE FUNCTION update_pay_status()
Access method: heap

----------------------------------------

=== Table: orders ===
                                                                         Table "public.orders"
       Column        |           Type           | Collation | Nullable |                        Default                        | Storage  | Stats target | Description 
---------------------+--------------------------+-----------+----------+-------------------------------------------------------+----------+--------------+-------------
 trade_order         | text                     |           |          |                                                       | extended |              | 
 first_name_order    | text                     |           | not null |                                                       | extended |              | 
 last_name_order     | text                     |           |          |                                                       | extended |              | 
 email_order         | text                     |           |          |                                                       | extended |              | 
 phone_order         | text                     |           |          |                                                       | extended |              | 
 product_name_full   | text                     |           |          |                                                       | extended |              | 
 total_price         | text                     |           |          |                                                       | extended |              | 
 quantity            | text                     |           |          |                                                       | extended |              | 
 price_nzd           | text                     |           |          |                                                       | extended |              | 
 zoho_id             | text                     |           |          |                                                       | extended |              | 
 delivery            | text                     |           |          |                                                       | extended |              | 
 pay_in_person       | text                     |           |          |                                                       | extended |              | 
 checkbox_order      | text                     |           |          |                                                       | extended |              | 
 address             | text                     |           |          |                                                       | extended |              | 
 message             | text                     |           |          |                                                       | extended |              | 
 token               | text                     |           |          |                                                       | extended |              | 
 date_picker_order   | text                     |           |          |                                                       | extended |              | 
 time_picker_order   | text                     |           |          |                                                       | extended |              | 
 record_id           | integer                  |           | not null | nextval('orders_record_id_seq'::regclass)             | plain    |              | 
 order_creation_time | timestamp with time zone |           |          | timezone('Pacific/Auckland'::text, CURRENT_TIMESTAMP) | plain    |              | 
Indexes:
    "orders_pkey" PRIMARY KEY, btree (record_id)
Access method: heap

----------------------------------------

=== Table: expiry ===
                                                                  Table "public.expiry"
       Column       |           Type           | Collation | Nullable |                  Default                  | Storage  | Stats target | Description 
--------------------+--------------------------+-----------+----------+-------------------------------------------+----------+--------------+-------------
 record_id          | integer                  |           | not null | nextval('expiry_record_id_seq'::regclass) | plain    |              | 
 payments_record_id | integer                  |           | not null |                                           | plain    |              | 
 date_time          | timestamp with time zone |           | not null |                                           | plain    |              | 
 status             | text                     |           | not null |                                           | extended |              | 
 message            | text                     |           |          |                                           | extended |              | 
Indexes:
    "expiry_pkey" PRIMARY KEY, btree (record_id)
Foreign-key constraints:
    "expiry_payments_record_id_fkey" FOREIGN KEY (payments_record_id) REFERENCES payments(record_id)
Triggers:
    trg_update_expiry_status AFTER INSERT OR UPDATE ON expiry FOR EACH ROW EXECUTE FUNCTION update_expiry_status()
Access method: heap

----------------------------------------
----------------------------------------

=== File: /workspaces/mware3/server.js ===
/**
 * Main Application Entry Point
 * --------------------------
 * Purpose: Initializes and configures the Express application
 * Role: Sets up middleware, routes, and starts the server
 * 
 * Key Components:
 * 1. Environment variables loading
 * 2. CORS configuration
 * 3. Route registration
 * 4. Server initialization
 * 5. Admin dashboard
 * 
 * Dependencies:
 * - dotenv for environment variables
 * - express for web server
 * - cors for Cross-Origin Resource Sharing
 * - ejs for templating
 */

require("dotenv").config();
const express = require("express");
const cors = require("cors");
const path = require('path');
const rateLimit = require('express-rate-limit');

// Import configurations
const corsOptions = require('./src/config/cors');

// Import routes
const orderRoutes = require('./src/routes/public/orders');
const paymentRoutes = require('./src/routes/public/payments');
const adminRoutes = require('./src/routes/admin/dashboard');

// Import payment status queue
const { paymentStatusQueue } = require('./src/services/payments/paystatus/paymentStatusQueue');

// Debug: Log environment variables
console.log('Environment:', {
    PORT: process.env.PORT,
    DATABASE_URL: process.env.DATABASE_URL ? 'Set' : 'Not Set',
    JWT_SECRET: process.env.JWT_SECRET ? 'Set' : 'Not Set',
    POLI_AUTH_CODE: process.env.POLI_AUTH_CODE ? 'Set' : 'Not Set',
    ADMIN_PASSWORD: process.env.ADMIN_PASSWORD ? 'Set' : 'Not Set'
});

const app = express();

// Trust proxy setting for rate limiting (important for Railway)
app.set('trust proxy', 1);

// Set up templating engine for admin dashboard
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Middleware
app.use(cors(corsOptions));
app.use(express.json());

console.log('Middleware initialized');

// Admin route rate limiting
const adminLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later'
});

// Routes
app.use("/", orderRoutes);          // Base URL for order routes
app.use("/api", paymentRoutes);     // Payment status endpoint
app.use('/admin', adminLimiter, adminRoutes); // Admin dashboard routes

// Error handling middleware
app.use((err, req, res, next) => {
    console.error('Global error:', err);
    res.status(500).json({ error: "Server error" });
});

// ⚠️ CONFIGURE: Server port
const PORT = process.env.PORT || 3000;

// CRITICAL: Create server this way to handle shutdown
const server = app.listen(PORT, () => {
    console.log(`🚀 Server running on port ${PORT}`);
    console.log(`💰 Payment status checking service initialized`);
});

// Graceful Shutdown Handler
function gracefulShutdown() {
    console.log('Received kill signal, shutting down gracefully');
    
    // First close the server
    server.close(async () => {
        console.log('Closed out remaining connections');
        
        // Then close the payment status queue
        try {
            await paymentStatusQueue.close();
            console.log('Payment status queue closed');
        } catch (err) {
            console.error('Error closing payment status queue:', err);
        }
        
        process.exit(0);
    });
    
    // Force close after 10 seconds
    setTimeout(() => {
        console.error('Could not close connections in time, forcefully shutting down');
        process.exit(1);
    }, 10000);
}

// Handle shutdown signals
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// Add basic health check endpoint
app.get('/health', (req, res) => {
    res.json({ status: 'ok', timestamp: new Date().toISOString() });
});----------------------------------------

=== File: /workspaces/mware3/.env ===
# Database Configuration
DATABASE_URL=postgres://postgres:********@localhost:5432/railway_dev

# Security
JWT_SECRET=**********************

# POLi Payment Integration
POLI_AUTH_CODE=**********************
POLI_API_URL=https://poliapi.uat3.paywithpoli.com/api/POLiLink/Create
POLI_API_STATUS_URL=https://publicapi.uat3.paywithpoli.com/api/POLiLink/Status/

# CORS Configuration
CORS_ORIGIN=https://gold-buyers-christchurch-test.webflow.io

# Database Connection Details (extracted from DATABASE_URL)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=railway_dev
DB_USER=postgres
DB_PASSWORD=********

BLINK_CLIENT_ID=uJlIlsU0bLYc86N3zBpZZqpptgdlZ5sk
BLINK_CLIENT_SECRET=9XisL8Q0_89MUTyyTP0_AzbenEQ5fF7-8vgemVxrxmpO_5EOR8B4nEpH2if_5XWp

BLINK_API_BASE_URL=https://sandbox.debit.blinkpay.co.nz/payments/v1
BLINK_AUTH_URL=https://sandbox.debit.blinkpay.co.nz/oauth2/token
BLINK_REDIRECT_URL=https://gold-buyers-christchurch.webflow.io/

BLINK_PAYMENT_EXPIRY_MINUTES=30
REDIS_URL=redis://localhost:6379
CLEANUP_PAYMENT_STATUS_QUEUE=false


BTCPAY_API_URL=https://btcpay.canterburygold.co.nz
BTCPAY_API_KEY=93a2787029a386c85ef6f174e7bc71c211ee9d74
BTCPAY_STORE_ID=BBBSsTabQGXnK3FhJAHVrygBN1gFPC5tfeUWrPWRFZHP
BTCPAY_REDIRECT_URL=https://gold-buyers-christchurch.webflow.io/

STRIPE_BASE_URL=https://api.stripe.com
STRIPE_PUBLISHABLE_KEY=pk_test_51Qv6w4R50uNdu8Yp0pzgpGaetorJpmgYWqDGXztPkRbaBQ1zI3jh6OKAeITqCkr8aPqvuoP0JTuRcxYwb8kYXHWf00tP2l274h
STRIPE_SECRET_KEY=sk_test_51Qv6w4R50uNdu8Yp2nOjV2WWSmQgUgVklyvNhAjitxt9vQYRiMUUrrapfOx8rfA22Ysdv0i3q5yHmW6sACLcSTBa00NS0fPrIA
STRIPE_LOCAL_FEE=0.027
STRIPE_SUCCESS_URL=https://gold-buyers-christchurch.webflow.io/
STRIPE_CANCEL_URL=https://gold-buyers-christchurch.webflow.io/
STRIPE_ALIPAY_FEE=0.03

ADMIN_PASSWORD=********

----------------------------------------
-e 
=== File: /workspaces/mware3/src/routes/admin/dashboard.js
// src/routes/admin/dashboard.js
const express = require('express');
const router = express.Router();
const pool = require('../../config/database');
const basicAuth = require('express-basic-auth');

// Authentication middleware
const adminAuth = basicAuth({
  users: { 
    'admin': process.env.ADMIN_PASSWORD || 'changeme' // Set a secure password in .env
  },
  challenge: true,
  realm: 'Payment Admin Dashboard'
});

// Admin dashboard route with authentication
router.get('/payments', adminAuth, async (req, res) => {
  try {
    // Pagination parameters
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 50;
    const offset = (page - 1) * limit;
    
    // Search/filter parameters
    const search = req.query.search || '';
    const status = req.query.status || '';
    const provider = req.query.provider || '';
    
    // Build query with filters
    let query = `
      SELECT p.*, o.trade_order, o.first_name_order, o.email_order
      FROM payments p
      LEFT JOIN orders o ON p.order_record_id = o.record_id
      WHERE 1=1
    `;
    const params = [];
    
    if (search) {
      params.push(`%${search}%`);
      query += ` AND (o.trade_order ILIKE $${params.length} OR o.email_order ILIKE $${params.length})`;
    }
    
    if (status) {
      params.push(status);
      query += ` AND p.status_pay = $${params.length}`;
    }
    
    if (provider) {
      params.push(provider);
      query += ` AND p.provider = $${params.length}`;
    }
    
    // Add sorting and pagination
    query += ` ORDER BY p.created_at DESC LIMIT $${params.length + 1} OFFSET $${params.length + 2}`;
    params.push(limit, offset);
    
    // Count total for pagination
    const countQuery = query.replace('SELECT p.*, o.trade_order, o.first_name_order, o.email_order', 'SELECT COUNT(*)').split('ORDER BY')[0];
    
    // Execute queries
    const [payments, countResult] = await Promise.all([
      pool.query(query, params),
      pool.query(countQuery, params.slice(0, -2))
    ]);
    
    const totalPayments = parseInt(countResult.rows[0].count);
    const totalPages = Math.ceil(totalPayments / limit);
    
    // Render the admin dashboard with data
    res.render('admin/payments', {
      payments: payments.rows,
      page,
      limit,
      totalPages,
      totalPayments,
      search,
      status,
      provider,
      query: req.query
    });
  } catch (error) {
    console.error('Error fetching payments for admin dashboard:', error);
    res.status(500).render('admin/error', { error: 'Failed to load payment data' });
  }
});

module.exports = router;----------------------------------------
-e 
=== File: /workspaces/mware3/src/routes/public/orders.js
/**
 * Order Routes
 * -----------
 * Purpose: Defines all HTTP endpoints related to orders
 * Role: Handles HTTP requests and delegates business logic to OrderService
 * 
 * Current Endpoints:
 * POST /create - Creates a new order
 * 
 * Dependencies:
 * - OrderService for business logic
 * - Express Router for routing
 * 
 * Error Handling:
 * - 400 for validation errors
 * - 500 for server errors
 */

const express = require('express');
const router = express.Router();
const OrderService = require('../../services/orders/orderService');

router.post("/create", async (req, res) => {
    try {
        const result = await OrderService.createOrder(req.body);
        res.json(result);
    } catch (error) {
        console.error("Order creation error:", error);
        res.status(error.message.includes("required") ? 400 : 500)
           .json({ error: error.message || "Failed to create order" });
    }
});

module.exports = router;----------------------------------------
-e 
=== File: /workspaces/mware3/src/routes/public/payments.js
/**
 * Payment Routes
 * -------------
 * Purpose: Handles payment status checking endpoints
 * Role: Provides API for checking payment URL status
 * 
 * Endpoints:
 * GET /api/payment-status/:token - Check payment URL status
 * GET /api/check-payment-status/:paymentId - Manually check specific payment status
 * 
 * Dependencies:
 * - PaymentService for business logic
 * - PaymentStatusService for status checks
 * - Express Router for routing
 * 
 * Error Handling:
 * - 400 for validation errors
 * - 500 for server errors
 */

const express = require('express');
const router = express.Router();
const PaymentService = require('../../services/payments/paymentService');
const paymentStatusService = require('../../services/payments/paystatus/paymentStatusService');
const rateLimit = require('express-rate-limit');

// Rate limiting: 60 requests per minute
const statusLimiter = rateLimit({
    windowMs: 60 * 1000,
    max: 60,
    message: { error: 'Too many requests, please try again later' }
});

router.get("/payment-status/:token", statusLimiter, async (req, res) => {
    try {
        console.log(`Checking payment status for token: ${req.params.token}`);
        const result = await PaymentService.getStatusByToken(req.params.token);
        res.json(result);
    } catch (error) {
        console.error("Payment status check error:", error);
        res.status(400).json({ 
            error: error.message || "Failed to check payment status" 
        });
    }
});

// New route for manually checking payment status
router.get("/check-payment-status/:paymentId", statusLimiter, async (req, res) => {
    try {
        console.log(`Manually checking payment status for ID: ${req.params.paymentId}`);
        const result = await paymentStatusService.checkPaymentStatus(req.params.paymentId);
        res.json(result);
    } catch (error) {
        console.error("Manual payment status check error:", error);
        res.status(400).json({ 
            error: error.message || "Failed to check payment status" 
        });
    }
});

module.exports = router;----------------------------------------
-e 
=== File: /workspaces/mware3/src/scripts/views/admin/payments.ejs
<!-- views/admin/payments.ejs -->
<!DOCTYPE html>
<html>
<head>
  <title>Payments Admin Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .table-responsive { overflow-x: auto; }
    .status-completed { color: green; font-weight: bold; }
    .status-pending { color: orange; }
    .status-failed, .status-error { color: red; }
    .filter-form { margin-bottom: 20px; }
  </style>
</head>
<body>
  <div class="container mt-4">
    <h1>Payments Dashboard</h1>
    
    <!-- Filter Form -->
    <div class="card mb-4">
      <div class="card-body">
        <form class="filter-form" method="GET">
          <div class="row g-3">
            <div class="col-md-4">
              <label class="form-label">Search</label>
              <input type="text" class="form-control" name="search" value="<%= search %>" placeholder="Search by order or email">
            </div>
            <div class="col-md-3">
              <label class="form-label">Status</label>
              <select class="form-select" name="status">
                <option value="">All Statuses</option>
                <option value="completed" <%= status === 'completed' ? 'selected' : '' %>>Completed</option>
                <option value="pending" <%= status === 'pending' ? 'selected' : '' %>>Pending</option>
                <option value="failed" <%= status === 'failed' ? 'selected' : '' %>>Failed</option>
                <option value="error" <%= status === 'error' ? 'selected' : '' %>>Error</option>
              </select>
            </div>
            <div class="col-md-3">
              <label class="form-label">Provider</label>
              <select class="form-select" name="provider">
                <option value="">All Providers</option>
                <option value="POLi" <%= provider === 'POLi' ? 'selected' : '' %>>POLi</option>
                <option value="STRIPE" <%= provider === 'STRIPE' ? 'selected' : '' %>>Stripe</option>
                <option value="BLINK" <%= provider === 'BLINK' ? 'selected' : '' %>>Blink</option>
                <option value="BTCPAY" <%= provider === 'BTCPAY' ? 'selected' : '' %>>BTCPay</option>
                <option value="ALIPAY" <%= provider === 'ALIPAY' ? 'selected' : '' %>>Alipay</option>
              </select>
            </div>
            <div class="col-md-2 d-flex align-items-end">
              <button type="submit" class="btn btn-primary w-100">Filter</button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <!-- Results Table -->
    <div class="card">
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-striped table-hover">
            <thead>
              <tr>
                <th>ID</th>
                <th>Date</th>
                <th>Order</th>
                <th>Customer</th>
                <th>Provider</th>
                <th>Amount</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% if (payments && payments.length > 0) { %>
                <% payments.forEach(payment => { %>
                  <tr>
                    <td><%= payment.record_id %></td>
                    <td><%= new Date(payment.created_at).toLocaleString() %></td>
                    <td><a href="#" title="View Order Details"><%= payment.trade_order || 'N/A' %></a></td>
                    <td><%= payment.first_name_order || 'N/A' %> <small><%= payment.email_order || '' %></small></td>
                    <td><%= payment.provider %></td>
                    <td>$<%= parseFloat(payment.amount).toFixed(2) %></td>
                    <td class="status-<%= payment.status_pay || 'pending' %>"><%= payment.status_pay || 'pending' %></td>
                    <td>
                      <% if (payment.payment_url) { %>
                        <a href="<%= payment.payment_url %>" target="_blank" class="btn btn-sm btn-outline-primary">View</a>
                      <% } %>
                      <button class="btn btn-sm btn-outline-secondary" 
                              onclick="checkStatus(<%= payment.record_id %>)">Check Status</button>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="8" class="text-center">No payments found</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
        
        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center mt-3">
          <div>
            Showing <%= payments.length %> of <%= totalPayments %> payments
          </div>
          <nav aria-label="Page navigation">
            <ul class="pagination">
              <% if (page > 1) { %>
                <li class="page-item">
                  <a class="page-link" href="?page=<%= page-1 %>&limit=<%= limit %>&search=<%= search %>&status=<%= status %>&provider=<%= provider %>">Previous</a>
                </li>
              <% } %>
              
              <% for(let i = Math.max(1, page-2); i <= Math.min(totalPages, page+2); i++) { %>
                <li class="page-item <%= i === page ? 'active' : '' %>">
                  <a class="page-link" href="?page=<%= i %>&limit=<%= limit %>&search=<%= search %>&status=<%= status %>&provider=<%= provider %>"><%= i %></a>
                </li>
              <% } %>
              
              <% if (page < totalPages) { %>
                <li class="page-item">
                  <a class="page-link" href="?page=<%= page+1 %>&limit=<%= limit %>&search=<%= search %>&status=<%= status %>&provider=<%= provider %>">Next</a>
                </li>
              <% } %>
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    function checkStatus(paymentId) {
      fetch(`/api/check-payment-status/${paymentId}`)
        .then(response => response.json())
        .then(data => {
          alert(`Status: ${data.status}\nMessage: ${data.message || 'No message'}`);
          location.reload();
        })
        .catch(error => {
          alert('Error checking status: ' + error);
        });
    }
  </script>
</body>
</html>----------------------------------------
-e 
=== File: /workspaces/mware3/src/scripts/views/admin/error.ejs
<!-- views/admin/error.ejs -->
<!DOCTYPE html>
<html>
<head>
  <title>Error - Admin Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
  <div class="container mt-5">
    <div class="alert alert-danger">
      <h4>Error</h4>
      <p><%= error %></p>
      <a href="/admin/payments" class="btn btn-primary">Back to Dashboard</a>
    </div>
  </div>
</body>
</html>----------------------------------------
-e 
=== File: /workspaces/mware3/src/config/cors.js
/**
 * CORS Configuration
 * -----------------
 * Purpose: Defines Cross-Origin Resource Sharing (CORS) settings
 * Role: Controls which domains can access your API
 * 
 * IMPORTANT CONFIGURATION:
 * - origin: Change this URL when deploying to different environments
 * - methods: HTTP methods allowed
 * - allowedHeaders: Headers clients can send
 */

const corsOptions = {
    origin: process.env.CORS_ORIGIN,
    methods: "GET,POST,OPTIONS",
    allowedHeaders: "Content-Type",
    credentials: true
};

module.exports = corsOptions;----------------------------------------
-e 
=== File: /workspaces/mware3/src/config/database.js
/**
 * Database Configuration
 * ---------------------
 * Purpose: Centralizes database connection configuration
 * Role: Provides a single connection pool instance used throughout the application
 * 
 * Dependencies:
 * - pg (PostgreSQL client)
 * - DATABASE_URL environment variable
 * 
 * IMPORTANT CONFIGURATION:
 * The DATABASE_URL should be set in your .env file with format:
 * postgresql://username:password@host:port/database
 */

const { Pool } = require("pg");

const pool = new Pool({ 
    connectionString: process.env.DATABASE_URL 
});

module.exports = pool;----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/pdf/pdfService.js
/**
 * PDF Generation Service
 * ---------------------
 * Purpose: Handles PDF generation for order confirmations
 * Role: Creates PDFs from order data using Puppeteer
 * 
 * Dependencies:
 * - puppeteer for PDF generation
 * - Requires Chrome/Chromium to be installed in the environment
 */

const puppeteer = require('puppeteer');

class PDFService {
    async generateOrderPDF(orderData) {
        const browser = await puppeteer.launch({
            args: ['--no-sandbox', '--disable-setuid-sandbox'],
            headless: 'new'  // Using new headless mode
        });

        try {
            const page = await browser.newPage();
            
            // TODO: Replace with your actual order page URL
            // await page.goto('https://your-webflow-print-page-url');
            
            // TODO: Add logic to populate order data
            
            const pdf = await page.pdf({
                format: 'A4',
                printBackground: true
            });

            return pdf;
        } finally {
            await browser.close();
        }
    }
}

module.exports = new PDFService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/poliService.js
/**
 * POLi Payment Service Integration
 * 
 * This service handles the integration with POLi payment gateway for processing payments
 * in New Zealand. It provides functionality to generate payment links and handle payment
 * transactions through the POLi API.
 * 
 * Key Features:
 * - Generates payment links with 30-minute expiry
 * - Handles NZ timezone specific formatting
 * - Stores payment records in database
 * - Error handling and logging
 * - Extracts and stores payment token for status checking
 * - Schedules status checks at 1min and 3min (for testing)
 * 
 * Flow:
 * 1. Receives order data
 * 2. Generates expiry timestamp in NZ timezone
 * 3. Creates POLi API payload
 * 4. Makes API request to generate payment link
 * 5. Extracts payment token from URL
 * 6. Stores payment record with token in database
 * 7. Schedules status checks
 * 
 * Requirements:
 * - POLi API credentials in environment variables
 * - PostgreSQL database connection
 * - Axios for HTTP requests
 */

const axios = require('axios');
const pool = require('../../config/database');
const { schedulePaymentStatusChecks } = require('./paystatus/paymentStatusQueue');

class PoliService {
    /**
     * Generates a payment link through POLi API
     * @param {Object} orderData - Contains order details including total_price and trade_order
     * @returns {String} Payment URL for redirect
     */
    async generatePaymentLink(orderData) {
        try {
            console.log('\n=== POLi Payment Processing ===');
            console.log('Generating POLi payment link for order:', orderData.trade_order);

            // Calculate expiry time 30 minutes from now
            const date = new Date();
            const futureDate = new Date(date.getTime() + (30 * 60 * 1000));
            
            // Format with New Zealand timezone (UTC+13)
            const formattedExpiry = futureDate.toLocaleString('en-NZ', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                timeZone: 'Pacific/Auckland',
                hour12: false
            }).replace(/(\d{2})\/(\d{2})\/(\d{4}), (\d{2}):(\d{2}):(\d{2})/, '$3-$2-$1T$4:$5:$6+13:00');

            console.log('POLi Generated Expiry Time:', formattedExpiry);

            // Construct payload for POLi API
            const payload = {
                LinkType: "0",
                Amount: orderData.total_price.toString(),
                MerchantReference: orderData.trade_order,
                LinkExpiry: formattedExpiry
            };

            console.log('POLi API Payload:', JSON.stringify(payload));

            // Make API request to POLi
            const response = await axios.post(
                process.env.POLI_API_URL,
                payload,
                {
                    headers: {
                        'Authorization': `Basic ${process.env.POLI_AUTH_CODE}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            // Process response and remove quotes
            const paymentUrl = response.data.replace(/"/g, '');
            console.log('POLi API Response:', paymentUrl);

            // Extract the token from the URL
            // URL format example: https://poliapi.uat3.paywithpoli.com/api/POLiLink/Navigate/wsWnx
            const payidMatch = paymentUrl.match(/\/([^\/]+)$/);
            const payid = payidMatch ? payidMatch[1] : null;

            console.log('Extracted POLi token (payid):', payid);

            // Store successful payment record in database with payid
            const result = await pool.query(
                `INSERT INTO payments (order_record_id, provider, status_url, amount, payment_url, payid) 
                 VALUES ($1, $2, $3, $4, $5, $6)
                 RETURNING record_id`,
                [orderData.record_id, 'POLi', 'success', orderData.total_price, paymentUrl, payid]
            );
            
            const paymentRecordId = result.rows[0]?.record_id;

            // Schedule status checks at 1min and 3min after creation (for testing)
            if (payid && paymentRecordId) {
                schedulePaymentStatusChecks({
                    record_id: paymentRecordId,
                    provider: 'POLi',
                    payid: payid
                });
            }

            return paymentUrl;

        } catch (error) {
            console.error('\n=== POLi API Error ===');
            console.error('Error details:', {
                message: error.message,
                response: error.response?.data,
                order: orderData.trade_order
            });
            
            // Store failed payment record in database
            await pool.query(
                `INSERT INTO payments (order_record_id, provider, status_url, amount, message_url) 
                 VALUES ($1, $2, $3, $4, $5)`,
                [orderData.record_id, 'POLi', 'failed', orderData.total_price, 
                 error.response?.data?.ErrorMessage || error.message]
            );
            throw error;
        }
    }
}

module.exports = new PoliService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/stripeService.js
/**
 * Stripe Payment Service Integration
 * --------------------------------
 * Purpose: Handles Stripe Checkout Session creation for payment processing
 * 
 * Features:
 * - Creates one-time payment links using Stripe Checkout
 * - Supports single payments without inventory management
 * - 30-minute expiry on payment links
 * - Calculates fees (2.7% + $0.30)
 * - New Zealand specific restrictions
 * 
 * Required Environment Variables:
 * - STRIPE_SECRET_KEY: Stripe API secret key
 * - STRIPE_BASE_URL: Base URL for Stripe API
 * - STRIPE_LOCAL_FEE: Local fee percentage (e.g., 0.027 for 2.7%)
 * - STRIPE_SUCCESS_URL: Success redirect URL
 * - STRIPE_CANCEL_URL: Cancel redirect URL
 */

const axios = require('axios');
const pool = require('../../config/database');
const { schedulePaymentStatusChecks } = require('./paystatus/paymentStatusQueue');

class StripeService {
    constructor() {
        this.secretKey = process.env.STRIPE_SECRET_KEY;
        this.baseUrl = process.env.STRIPE_BASE_URL;
        this.feePercentage = parseFloat(process.env.STRIPE_LOCAL_FEE) || 0.027;
        this.fixedFee = 0.30; // Fixed fee in dollars
        this.successUrl = process.env.STRIPE_SUCCESS_URL;
        this.cancelUrl = process.env.STRIPE_CANCEL_URL;

        // Validate configuration
        const requiredEnvVars = [
            'STRIPE_SECRET_KEY',
            'STRIPE_BASE_URL',
            'STRIPE_SUCCESS_URL',
            'STRIPE_CANCEL_URL'
        ];

        const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
        if (missingVars.length > 0) {
            console.warn('Missing Stripe configuration:', missingVars.join(', '));
        }
    }

    /**
     * Calculates total amount including Stripe fees
     * Formula: (base amount + 0.30) / (1 - 0.027)
     * @param {number} baseAmount - Original amount before fees
     * @returns {number} Total amount including fees
     */
    calculateTotalWithFees(baseAmount) {
        const amount = parseFloat(baseAmount);
        return (amount + this.fixedFee) / (1 - this.feePercentage);
    }

    /**
     * Generates a Stripe Checkout Session payment link
     * @param {Object} orderData - Order information including amount and reference
     * @returns {String} Checkout session URL
     */
    async generatePaymentLink(orderData) {
        try {
            console.log('\n=== Stripe Payment Processing ===');
            console.log('Generating Stripe payment link for order:', orderData.trade_order);

            // Calculate total amount including fees
            const baseAmount = parseFloat(orderData.total_price);
            const totalWithFees = this.calculateTotalWithFees(baseAmount);
            
            // Convert to cents for Stripe
            const amountInCents = Math.round(totalWithFees * 100);

            console.log('Payment calculation:', {
                baseAmount,
                feePercentage: this.feePercentage,
                fixedFee: this.fixedFee,
                totalWithFees,
                amountInCents
            });

            const payload = {
                mode: 'payment',
                success_url: this.successUrl,
                cancel_url: this.cancelUrl,
                currency: 'nzd',
                payment_method_types: ['card'],
                
                billing_address_collection: 'required',
                shipping_address_collection: {
                    allowed_countries: ['NZ']
                },

                line_items: [{
                    price_data: {
                        currency: 'nzd',
                        product_data: {
                            name: orderData.product_name_full || 'Gold Purchase',
                            description: `Order: ${orderData.trade_order} (Includes processing fee)`
                        },
                        unit_amount: amountInCents
                    },
                    quantity: 1
                }],

                customer_email: orderData.email_order || undefined,
                client_reference_id: orderData.trade_order,
                expires_at: Math.floor(Date.now() / 1000) + (30 * 60)
            };

            const response = await axios.post(
                `${this.baseUrl}/v1/checkout/sessions`,
                payload,
                {
                    headers: {
                        'Authorization': `Bearer ${this.secretKey}`,
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                }
            );

            console.log('Stripe Checkout Session created:', response.data.id);

            if (response.data && response.data.url) {
                // Store payment record with original amount (not including fees)
                const insertResult = await pool.query(
                    `INSERT INTO payments (
                        order_record_id, provider, status_url, amount, 
                        payment_url, payid, expires_at
                    ) VALUES ($1, $2, $3, $4, $5, $6, NOW() + interval '30 minutes')
                    RETURNING record_id`,
                    [
                        orderData.record_id,
                        'STRIPE',
                        'success',
                        orderData.total_price, // Store original amount
                        response.data.url,
                        response.data.id
                    ]
                );
                
                // Schedule status checks at 1min and 3min after creation (for testing)
                schedulePaymentStatusChecks({
                    record_id: insertResult.rows[0].record_id,
                    provider: 'STRIPE',
                    payid: response.data.id
                });

                return response.data.url;
            } else {
                throw new Error('Invalid response from Stripe');
            }

        } catch (error) {
            console.error('\n=== Stripe API Error ===');
            console.error('Error details:', {
                message: error.message,
                response: error.response?.data,
                order: orderData.trade_order
            });

            // Store failed payment record
            await pool.query(
                `INSERT INTO payments (
                    order_record_id, provider, status_url, amount, message_url
                ) VALUES ($1, $2, $3, $4, $5)`,
                [
                    orderData.record_id,
                    'STRIPE',
                    'failed',
                    orderData.total_price,
                    error.response?.data?.error?.message || error.message
                ]
            );

            throw error;
        }
    }
}

module.exports = new StripeService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/paystatus/providers/alipayPaymentStatus.js
/**
 * Alipay Payment Status Provider
 * ----------------------------
 * Purpose: Handles Alipay-specific payment status checking
 * 
 * Functions:
 * - Connect to Stripe API (which handles Alipay)
 * - Query Checkout Session status using the stored session ID
 * - Parse and normalize API responses with Alipay context
 */

const axios = require('axios');

class AlipayPaymentStatus {
    constructor() {
        this.baseUrl = process.env.STRIPE_BASE_URL || 'https://api.stripe.com';
        this.secretKey = process.env.STRIPE_SECRET_KEY;
    }

    /**
     * Check the status of an Alipay payment
     * @param {string} sessionId - The Checkout Session ID to check
     * @returns {Object} Normalized status information
     */
    async checkStatus(sessionId) {
        try {
            console.log(`Checking Alipay payment status for session: ${sessionId}`);
            
            // Make API request to Stripe (which powers Alipay payments)
            const response = await axios.get(
                `${this.baseUrl}/v1/checkout/sessions/${sessionId}`,
                {
                    headers: {
                        'Authorization': `Bearer ${this.secretKey}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            
            console.log(`Alipay status response for ${sessionId}:`, response.data);
            
            // Check if payment method types include alipay
            const isAlipayPayment = response.data.payment_method_types &&
                                   response.data.payment_method_types.includes('alipay');
            
            if (!isAlipayPayment) {
                console.warn(`Session ${sessionId} does not appear to be an Alipay payment`);
            }
            
            return {
                status: this.normalizeStatus(response.data.payment_status, response.data.status),
                originalStatus: `${response.data.status}/${response.data.payment_status}`,
                message: `Alipay status check successful: ${response.data.payment_status}`
            };
        } catch (error) {
            console.error(`Alipay status check error for ${sessionId}:`, {
                message: error.message,
                response: error.response?.data || error.response?.statusText
            });
            
            return {
                status: 'error',
                originalStatus: error.response?.status || 'unknown',
                message: error.response?.data?.error?.message || error.message
            };
        }
    }
    
    /**
     * Maps Stripe/Alipay-specific status values to standardized application status values
     * @param {string} paymentStatus - Payment status from Stripe API
     * @param {string} sessionStatus - Session status from Stripe API
     * @returns {string} Normalized status for application use
     */
    normalizeStatus(paymentStatus, sessionStatus) {
        // Handle if session is expired or incomplete
        if (sessionStatus === 'expired') return 'expired';
        if (sessionStatus === 'open') return 'pending';
        
        // Map payment statuses to our application statuses
        const statusMap = {
            'unpaid': 'pending',       // Payment has not been paid yet
            'paid': 'completed',       // Payment has been paid
            'no_payment_required': 'completed', // No payment required
            'canceled': 'cancelled'    // Payment was canceled
        };
        
        return statusMap[paymentStatus] || 'unknown';
    }
}

module.exports = new AlipayPaymentStatus();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/paystatus/providers/btcpayPaymentStatus.js
/**
 * BTCPay Server Payment Status Provider
 * -----------------------------------
 * Purpose: Handles BTCPay-specific payment status checking
 * 
 * Functions:
 * - Connect to BTCPay Server API with proper authentication
 * - Query invoice status using the stored invoice ID
 * - Parse and normalize API responses
 * - Handle BTCPay-specific error conditions
 */

const axios = require('axios');

class BTCPayPaymentStatus {
    constructor() {
        // Remove trailing slash if present in API URL
        this.baseUrl = process.env.BTCPAY_API_URL?.replace(/\/$/, '');
        this.apiKey = process.env.BTCPAY_API_KEY;
        this.storeId = process.env.BTCPAY_STORE_ID;
    }

    /**
     * Check the status of a BTCPay invoice
     * @param {string} invoiceId - The BTCPay invoice ID to check
     * @returns {Object} Normalized status information
     */
    async checkStatus(invoiceId) {
        try {
            console.log(`Checking BTCPay invoice status for: ${invoiceId}`);
            
            if (!this.baseUrl || !this.apiKey || !this.storeId) {
                throw new Error('BTCPay configuration is incomplete');
            }
            
            // Make API request to BTCPay Server
            const response = await axios.get(
                `${this.baseUrl}/api/v1/stores/${this.storeId}/invoices/${invoiceId}`,
                {
                    headers: {
                        'Authorization': `token ${this.apiKey}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            
            console.log(`BTCPay status response for ${invoiceId}:`, {
                status: response.data.status,
                additionalStatus: response.data.additionalStatus
            });
            
            return {
                status: this.normalizeStatus(response.data.status, response.data.additionalStatus),
                originalStatus: `${response.data.status}/${response.data.additionalStatus || 'none'}`,
                message: `BTCPay status check successful: ${response.data.status}`
            };
        } catch (error) {
            console.error(`BTCPay status check error for ${invoiceId}:`, {
                message: error.message,
                response: error.response?.data || error.response?.statusText
            });
            
            return {
                status: 'error',
                originalStatus: error.response?.status || 'unknown',
                message: error.response?.data?.message || error.message
            };
        }
    }
    
    /**
     * Maps BTCPay-specific status values to standardized application status values
     * @param {string} invoiceStatus - Status from BTCPay API
     * @param {string} additionalStatus - Additional status details from BTCPay API
     * @returns {string} Normalized status for application use
     */
    normalizeStatus(invoiceStatus, additionalStatus) {
        // Map BTCPay statuses to our application statuses
        const statusMap = {
            'New': 'pending',          // Invoice created but not paid
            'Processing': 'pending',    // Invoice payment is being processed
            'Settled': 'completed',     // Invoice has been fully paid
            'Complete': 'completed',    // Payment confirmed and credited to merchant account
            'Expired': 'expired',       // Invoice expired without being paid
            'Invalid': 'cancelled',     // Invoice is no longer valid
            'Paid': 'completed',        // Invoice has been paid but not yet settled
            'Confirmed': 'completed'    // Payment confirmed but not yet settled
        };
        
        // Additional handling for special cases
        if (invoiceStatus === 'Settled' && additionalStatus === 'paidOver') {
            return 'completed';
        } else if (invoiceStatus === 'Settled' && additionalStatus === 'paidPartial') {
            return 'pending';
        }
        
        return statusMap[invoiceStatus] || 'unknown';
    }
}

module.exports = new BTCPayPaymentStatus();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/paystatus/providers/poliPaymentStatus.js
/**
 * POLi Payment Status Provider
 * ----------------------------
 * Purpose: Handles POLi-specific payment status checking
 * 
 * Functions:
 * - Connect to POLi API with proper authentication
 * - Query payment status using the stored token/payid
 * - Parse and normalize API responses
 * - Handle POLi-specific error conditions
 */

const axios = require('axios');

class PoliPaymentStatus {
    constructor() {
        // Use the environment variable for the base URL
        this.baseUrl = process.env.POLI_API_STATUS_URL || 'https://publicapi.uat3.paywithpoli.com/api/POLiLink/Status';
        this.authCode = process.env.POLI_AUTH_CODE;
    }

    /**
     * Check the status of a POLi payment
     * @param {string} payid - The payment token/ID to check
     * @returns {Object} Normalized status information
     */
    async checkStatus(payid) {
        try {
            console.log(`Checking POLi payment status for: ${payid}`);
            
            // Log URL being used (for debugging)
            const statusUrl = this.baseUrl.endsWith('/') ? `${this.baseUrl}${payid}` : `${this.baseUrl}/${payid}`;
            console.log(`POLi status check URL: ${statusUrl}`);
            console.log(`POLi auth code available: ${this.authCode ? 'Yes' : 'No'}`);
            
            // Make API request to POLi
            const response = await axios.get(statusUrl, {
                headers: {
                    'Authorization': `Basic ${this.authCode}`,
                    'Content-Type': 'application/json'
                }
            });
            
            console.log(`POLi status response for ${payid}:`, response.data);
            
            // Normalize the response
            // POLi returns the status as a quoted string like "Activated"
            const status = typeof response.data === 'string' 
                ? response.data.replace(/^"|"$/g, '') 
                : response.data;
            
            return {
                status: this.normalizeStatus(status),
                originalStatus: status,
                message: `POLi status check successful: ${status}`
            };
        } catch (error) {
            console.error(`POLi status check error for ${payid}:`, {
                message: error.message,
                response: error.response?.data || error.response?.statusText
            });
            
            return {
                status: 'error',
                originalStatus: error.response?.status || 'unknown',
                message: error.response?.data?.Message || error.message
            };
        }
    }
    
    /**
     * Maps POLi-specific status values to standardized application status values
     * @param {string} poliStatus - Status value from POLi API
     * @returns {string} Normalized status for application use
     */
    normalizeStatus(poliStatus) {
        // Map POLi statuses to our application statuses
        const statusMap = {
            'Activated': 'pending',         // Link has been activated but payment not completed
            'Completed': 'completed',       // Payment has been completed successfully
            'Cancelled': 'cancelled',       // User cancelled the payment
            'TimedOut': 'expired',          // Payment session timed out
            'Error': 'error',               // Error occurred during payment
            'Unused': 'pending'             // Link has not been used yet
        };
        
        return statusMap[poliStatus] || 'unknown';
    }
}

module.exports = new PoliPaymentStatus();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/paystatus/providers/stripePaymentStatus.js
/**
 * Stripe Payment Status Provider
 * ----------------------------
 * Purpose: Handles Stripe-specific payment status checking
 * 
 * Functions:
 * - Connect to Stripe API with proper authentication
 * - Query Checkout Session status using the stored session ID
 * - Parse and normalize API responses
 * - Handle Stripe-specific error conditions
 */

const axios = require('axios');

class StripePaymentStatus {
    constructor() {
        this.baseUrl = process.env.STRIPE_BASE_URL || 'https://api.stripe.com';
        this.secretKey = process.env.STRIPE_SECRET_KEY;
    }

    /**
     * Check the status of a Stripe payment
     * @param {string} sessionId - The Checkout Session ID to check
     * @returns {Object} Normalized status information
     */
    async checkStatus(sessionId) {
        try {
            console.log(`Checking Stripe payment status for session: ${sessionId}`);
            
            // Make API request to Stripe
            const response = await axios.get(
                `${this.baseUrl}/v1/checkout/sessions/${sessionId}`,
                {
                    headers: {
                        'Authorization': `Bearer ${this.secretKey}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            
            console.log(`Stripe status response for ${sessionId}:`, response.data);
            
            return {
                status: this.normalizeStatus(response.data.payment_status, response.data.status),
                originalStatus: `${response.data.status}/${response.data.payment_status}`,
                message: `Stripe status check successful: ${response.data.payment_status}`
            };
        } catch (error) {
            console.error(`Stripe status check error for ${sessionId}:`, {
                message: error.message,
                response: error.response?.data || error.response?.statusText
            });
            
            return {
                status: 'error',
                originalStatus: error.response?.status || 'unknown',
                message: error.response?.data?.error?.message || error.message
            };
        }
    }
    
    /**
     * Maps Stripe-specific status values to standardized application status values
     * @param {string} paymentStatus - Payment status from Stripe API
     * @param {string} sessionStatus - Session status from Stripe API
     * @returns {string} Normalized status for application use
     */
    normalizeStatus(paymentStatus, sessionStatus) {
        // Handle if session is expired or incomplete
        if (sessionStatus === 'expired') return 'expired';
        if (sessionStatus === 'open') return 'pending';
        
        // Map Stripe payment statuses to our application statuses
        const statusMap = {
            'unpaid': 'pending',       // Payment has not been paid yet
            'paid': 'completed',       // Payment has been paid
            'no_payment_required': 'completed', // No payment required
            'canceled': 'cancelled'    // Payment was canceled
        };
        
        return statusMap[paymentStatus] || 'unknown';
    }
}

module.exports = new StripePaymentStatus();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/paystatus/paymentStatusQueue.js
/**
 * Payment Status Queue
 * -------------------
 * Purpose: Manages scheduled jobs for payment status checks
 * 
 * Functions:
 * - Schedule status checks at 1min and 3min after each payment (for testing)
 * - Process jobs for different payment providers
 * - Handle job failures and retries
 */

const Queue = require('bull');
// Import the providers directly to avoid circular dependency
const poliPaymentStatus = require('./providers/poliPaymentStatus');
const stripePaymentStatus = require('./providers/stripePaymentStatus');
const alipayPaymentStatus = require('./providers/alipayPaymentStatus');
const btcpayPaymentStatus = require('./providers/btcpayPaymentStatus');
const pool = require('../../../config/database');

// Create the payment status check queue
const paymentStatusQueue = new Queue('payment-status-checks', process.env.REDIS_URL, {
    defaultJobOptions: {
        attempts: 3,
        backoff: {
            type: 'exponential',
            delay: 2000
        },
        removeOnComplete: true,
        removeOnFail: 100 // Keep the last 100 failed jobs for inspection
    }
});

// Process jobs for checking payment statuses
paymentStatusQueue.process(async (job) => {
    console.log(`Processing payment status check job: ${job.id}`, job.data);
    
    const { paymentId, payid, provider, checkTime } = job.data;
    
    // Validate required parameters to prevent errors
    if (!paymentId || !payid) {
        console.error(`Invalid job data - missing required parameters: ${JSON.stringify(job.data)}`);
        throw new Error('Missing required payment data (paymentId or payid)');
    }
    
    try {
        // Use provider directly to avoid circular dependency
        let statusResult;
        
        if (provider === 'POLi') {
            // Check payment status using the POLi provider
            statusResult = await poliPaymentStatus.checkStatus(payid);
        } 
        else if (provider === 'STRIPE') {
            // Check payment status using the Stripe provider
            statusResult = await stripePaymentStatus.checkStatus(payid);
        }
        else if (provider === 'ALIPAY') {
            // Check payment status using the Alipay provider
            statusResult = await alipayPaymentStatus.checkStatus(payid);
        }
        else if (provider === 'BTCPAY') {
            // Check payment status using the BTCPay provider
            statusResult = await btcpayPaymentStatus.checkStatus(payid);
        }
        else {
            throw new Error(`Unsupported provider: ${provider}`);
        }
        
        // Log the status check to database
        await logStatusCheck(paymentId, statusResult.status, statusResult.message);
        
        const result = {
            paymentId,
            payid,
            provider,
            status: statusResult.status,
            message: statusResult.message
        };
        
        console.log(`Completed ${checkTime} status check for ${provider} payment ${payid}`);
        return result;
    } catch (error) {
        console.error(`Error processing payment status check for ${provider} payment ${payid}:`, error);
        
        // Try to log the error
        try {
            await logStatusCheck(paymentId, 'error', error.message);
        } catch (logError) {
            console.error(`Failed to log status check error: ${logError.message}`);
        }
        
        throw error; // Rethrow to trigger Bull's retry mechanism
    }
});

/**
 * Helper function to log a status check to the database
 * Defined directly in this file to avoid circular dependencies
 */
async function logStatusCheck(paymentId, status, message) {
    try {
        const query = `
            INSERT INTO pay_status (payments_record_id, date_time, status, message)
            VALUES ($1, NOW(), $2, $3)
        `;
        
        await pool.query(query, [paymentId, status, message]);
        console.log(`Logged status check for payment ${paymentId}: ${status}`);
    } catch (error) {
        console.error(`Error logging status check for payment ${paymentId}:`, error);
        throw error;
    }
}

/**
 * Schedule status checks for a specific payment
 * @param {Object} payment - Payment object with id, payid and provider
 */
function schedulePaymentStatusChecks(payment) {
    if (!payment || !payment.payid || !payment.record_id) {
        console.log('Cannot schedule status checks for payment - missing required data:', payment);
        return;
    }
    
    console.log(`Scheduling status checks for ${payment.provider} payment ${payment.payid}`);
    
    // Schedule first check at 1 minute after creation (for testing)
    paymentStatusQueue.add(
        {
            paymentId: payment.record_id,
            payid: payment.payid,
            provider: payment.provider,
            checkTime: '1min'
        },
        {
            delay: 1 * 60 * 1000, // 1 minute (for testing)
            jobId: `${payment.provider}-${payment.payid}-1min`
        }
    );
    
    // Schedule second check at 3 minutes after creation (for testing)
    paymentStatusQueue.add(
        {
            paymentId: payment.record_id,
            payid: payment.payid,
            provider: payment.provider,
            checkTime: '3min'
        },
        {
            delay: 3 * 60 * 1000, // 3 minutes (for testing)
            jobId: `${payment.provider}-${payment.payid}-3min`
        }
    );
    
    console.log(`Scheduled status checks for ${payment.provider} payment ${payment.payid} at +1min and +3min (testing)`);
}

// Event listeners for monitoring the queue
paymentStatusQueue.on('completed', (job, result) => {
    console.log(`Job ${job.id} completed:`, {
        provider: job.data.provider,
        payid: job.data.payid,
        status: result?.status || 'unknown'
    });
});

paymentStatusQueue.on('failed', (job, error) => {
    console.error(`Job ${job.id} failed:`, {
        provider: job.data.provider,
        payid: job.data.payid,
        error: error.message
    });
});

// Clean up any existing repeatable jobs from previous implementations
async function cleanupOldRepeatingJobs() {
    try {
        // Get all repeatable jobs
        const repeatableJobs = await paymentStatusQueue.getRepeatableJobs();
        
        // Remove all repeatable jobs
        for (const job of repeatableJobs) {
            await paymentStatusQueue.removeRepeatableByKey(job.key);
            console.log(`Removed old repeatable job: ${job.key}`);
        }
        
        console.log('Old repeatable jobs cleanup completed');
    } catch (error) {
        console.error('Error cleaning up old repeatable jobs:', error);
    }
}

// Only run cleanup if environment variable isn't set to false
if (process.env.CLEANUP_PAYMENT_STATUS_QUEUE !== 'false') {
    cleanupOldRepeatingJobs();
    console.log('Old repeatable jobs cleanup completed');
} else {
    console.log('Job cleanup skipped (CLEANUP_PAYMENT_STATUS_QUEUE=false)');
}

module.exports = {
    paymentStatusQueue,
    schedulePaymentStatusChecks
};----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/paystatus/paymentStatusService.js
/**
 * Payment Status Service
 * ---------------------
 * Purpose: Core business logic for payment status checking
 * 
 * Functions:
 * - Handle API requests for checking payment status
 * - Fetch pending payments that need status checks
 * - Route status checks to appropriate payment providers
 */

const pool = require('../../../config/database');
const poliPaymentStatus = require('./providers/poliPaymentStatus');
const stripePaymentStatus = require('./providers/stripePaymentStatus');
const alipayPaymentStatus = require('./providers/alipayPaymentStatus');
const btcpayPaymentStatus = require('./providers/btcpayPaymentStatus');


class PaymentStatusService {
    constructor() {
        // Map of payment providers to their status checking implementations
        this.providers = {
            'POLi': poliPaymentStatus,
            'STRIPE': stripePaymentStatus,
            'ALIPAY': alipayPaymentStatus,
            'BTCPAY': btcpayPaymentStatus
        };
    }
    
    /**
     * Check status for a specific payment
     * Used by the API endpoint
     * @param {number} paymentId - Payment record ID
     * @returns {Object} Status check result
     */
    async checkPaymentStatus(paymentId) {
        try {
            // Get payment details
            const query = `
                SELECT record_id, payid, provider, status_pay
                FROM payments
                WHERE record_id = $1
            `;
            
            const result = await pool.query(query, [paymentId]);
            if (result.rows.length === 0) {
                throw new Error(`Payment not found: ${paymentId}`);
            }
            
            const payment = result.rows[0];
            if (!payment.payid) {
                throw new Error(`No payid for payment: ${paymentId}`);
            }
            
            // Get the appropriate provider implementation
            const providerImplementation = this.providers[payment.provider];
            if (!providerImplementation) {
                throw new Error(`No implementation for provider: ${payment.provider}`);
            }
            
            // Check the payment status
            const statusResult = await providerImplementation.checkStatus(payment.payid);
            
            // Log the status check result
            await this.logStatusCheck(payment.record_id, statusResult.status, statusResult.message);
            
            return {
                paymentId: payment.record_id,
                payid: payment.payid,
                provider: payment.provider,
                status: statusResult.status,
                message: statusResult.message
            };
        } catch (error) {
            console.error(`Error checking payment status for ID ${paymentId}:`, error);
            throw error;
        }
    }
    
    /**
     * Log a payment status check attempt to the pay_status table
     * @param {number} paymentId - Payment record ID
     * @param {string} status - Status result
     * @param {string} message - Status message or error
     */
    async logStatusCheck(paymentId, status, message) {
        try {
            const query = `
                INSERT INTO pay_status (payments_record_id, date_time, status, message)
                VALUES ($1, NOW(), $2, $3)
            `;
            
            await pool.query(query, [paymentId, status, message]);
            console.log(`Logged status check for payment ${paymentId}: ${status}`);
        } catch (error) {
            console.error(`Error logging status check for payment ${paymentId}:`, error);
            throw error;
        }
    }
}

module.exports = new PaymentStatusService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/blinkService.js
/**
 * Blink Payment Service Integration
 * 
 * This service handles the integration with Blink Debit payment gateway.
 * Uses OAuth2 client credentials flow for authentication.
 * 
 * Required Environment Variables:
 * - BLINK_CLIENT_ID: OAuth2 client ID
 * - BLINK_CLIENT_SECRET: OAuth2 client secret
 * - BLINK_API_BASE_URL: Base URL for Blink API (e.g., https://sandbox.debit.blinkpay.co.nz/payments/v1)
 * - BLINK_AUTH_URL: Authentication endpoint (e.g., https://sandbox.debit.blinkpay.co.nz/oauth2/token)
 * - BLINK_REDIRECT_URL: Redirect URL after payment (e.g., https://your-domain.com)
 * - BLINK_PAYMENT_EXPIRY_MINUTES: Minutes until payment link expires (default: 30)
 */

const axios = require('axios');
const pool = require('../../config/database');
const crypto = require('crypto');
const expiryService = require('../expiry/expiryService');

class BlinkService {
    constructor() {
        // Initialize configuration from environment variables
        this.CLIENT_ID = process.env.BLINK_CLIENT_ID;
        this.CLIENT_SECRET = process.env.BLINK_CLIENT_SECRET;
        this.BASE_URL = process.env.BLINK_API_BASE_URL;
        this.AUTH_URL = process.env.BLINK_AUTH_URL;
        this.REDIRECT_URL = process.env.BLINK_REDIRECT_URL;
        
        // Token management
        this.accessToken = null;
        this.tokenExpiry = null;

        // Initialize expiry service
        this.expiryService = expiryService;

        // Configuration validation
        const requiredEnvVars = [
            'BLINK_CLIENT_ID',
            'BLINK_CLIENT_SECRET',
            'BLINK_API_BASE_URL',
            'BLINK_AUTH_URL',
            'BLINK_REDIRECT_URL',
            'BLINK_PAYMENT_EXPIRY_MINUTES'
        ];

        const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
        if (missingVars.length > 0) {
            console.error('Missing required environment variables:', missingVars.join(', '));
            throw new Error('Missing required environment variables for Blink integration');
        }
    }

    // [Previous methods remain exactly the same: getAccessToken, ensureValidToken]
    async getAccessToken() {
        try {
            console.log('\n=== Blink Authentication ===');
            console.log('Requesting Blink access token...');
            
            const payload = {
                client_id: this.CLIENT_ID,
                client_secret: this.CLIENT_SECRET,
                grant_type: 'client_credentials',
                audience: 'https://api.blinkdebit.co.nz'
            };

            const response = await axios.post(
                this.AUTH_URL,
                payload,
                {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );

            this.accessToken = response.data.access_token;
            this.tokenExpiry = Date.now() + (response.data.expires_in * 1000);
            
            console.log('Successfully obtained Blink access token');
            return this.accessToken;
        } catch (error) {
            console.error('Failed to get Blink access token:', error.response?.data || error.message);
            throw error;
        }
    }

    async ensureValidToken() {
        if (!this.accessToken || !this.tokenExpiry || Date.now() >= this.tokenExpiry - 60000) {
            await this.getAccessToken();
        }
        return this.accessToken;
    }

    async generatePaymentLink(orderData) {
        try {
            console.log('\n=== Blink Payment Processing ===');
            console.log('Generating Blink payment link for order:', orderData.trade_order);

            const token = await this.ensureValidToken();

            const formattedAmount = typeof orderData.total_price === 'string' 
                ? parseFloat(orderData.total_price).toFixed(2)
                : orderData.total_price.toFixed(2);

            const payload = {
                flow: {
                    detail: {
                        type: "gateway",
                        redirect_uri: this.REDIRECT_URL,
                        flow_hint: {
                            type: "redirect",
                            bank: "PNZ"
                        }
                    }
                },
                pcr: {
                    particulars: orderData.trade_order.substring(0, 12).replace(/[^a-zA-Z0-9- &#?:_\/,.']/g, ''),
                    code: orderData.trade_order.substring(0, 12).replace(/[^a-zA-Z0-9- &#?:_\/,.']/g, ''),
                    reference: orderData.record_id.toString().substring(0, 12)
                },
                amount: {
                    total: formattedAmount,
                    currency: "NZD"
                }
            };

            console.log('Blink API Payload:', JSON.stringify(payload));

            const headers = {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'request-id': crypto.randomUUID(),
                'x-correlation-id': crypto.randomUUID(),
                'idempotency-key': crypto.randomUUID()
            };

            const response = await axios.post(
                `${this.BASE_URL}/quick-payments`,
                payload,
                {
                    headers: headers,
                    timeout: 10000
                }
            );

            console.log('Blink API Response:', response.data);

            if (response.data && response.data.redirect_uri) {
                await pool.query(
                    `INSERT INTO payments (
                        order_record_id, provider, status_url, amount, 
                        payment_url, payid, expires_at
                    ) VALUES ($1, $2, $3, $4, $5, $6, NOW() + interval '${process.env.BLINK_PAYMENT_EXPIRY_MINUTES} minutes')`,
                    [
                        orderData.record_id, 
                        'BLINK', 
                        'success', 
                        formattedAmount, 
                        response.data.redirect_uri,
                        response.data.quick_payment_id
                    ]
                );

                // Schedule payment expiry
                await this.expiryService.scheduleExpiry(
                    response.data.quick_payment_id,
                    'BLINK'
                );

                return response.data.redirect_uri;
            } else {
                throw new Error('No redirect_uri in response');
            }

        } catch (error) {
            console.error('\n=== Blink API Error ===');
            console.error('Error details:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status,
                headers: error.response?.headers,
                order: orderData.trade_order
            });
            
            await pool.query(
                `INSERT INTO payments (order_record_id, provider, status_url, amount, message_url) 
                 VALUES ($1, $2, $3, $4, $5)`,
                [orderData.record_id, 'BLINK', 'failed', orderData.total_price, 
                 error.response?.data?.detail || error.message]
            );
            
            console.error('Blink payment link generation failed for order:', orderData.trade_order);
            throw error;
        }
    }
}

module.exports = new BlinkService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/alipayService.js
/**
 * Alipay Service Integration (via Stripe)
 * -------------------------------------
 * Purpose: Handles Alipay-specific payment processing through Stripe Checkout
 * 
 * Features:
 * - Creates Alipay-only payment links using Stripe Checkout
 * - Implements 3% processing fee for Alipay transactions
 * - Restricts payment method to Alipay only
 * - Supports CNY currency for Alipay transactions
 * 
 * Environment Variables:
 * - STRIPE_SECRET_KEY: Stripe API secret key
 * - STRIPE_BASE_URL: Base URL for Stripe API
 * - STRIPE_ALIPAY_FEE: Alipay processing fee (e.g., 0.03 for 3%)
 * - STRIPE_SUCCESS_URL: Success redirect URL
 * - STRIPE_CANCEL_URL: Cancel redirect URL
 */

const axios = require('axios');
const pool = require('../../config/database');
const { schedulePaymentStatusChecks } = require('./paystatus/paymentStatusQueue');

class AlipayService {
    constructor() {
        this.secretKey = process.env.STRIPE_SECRET_KEY;
        this.baseUrl = process.env.STRIPE_BASE_URL;
        this.feePercentage = parseFloat(process.env.STRIPE_ALIPAY_FEE) || 0.03;
        this.successUrl = process.env.STRIPE_SUCCESS_URL;
        this.cancelUrl = process.env.STRIPE_CANCEL_URL;

        // Validate configuration
        const requiredEnvVars = [
            'STRIPE_SECRET_KEY',
            'STRIPE_BASE_URL',
            'STRIPE_SUCCESS_URL',
            'STRIPE_CANCEL_URL',
            'STRIPE_ALIPAY_FEE'
        ];

        const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
        if (missingVars.length > 0) {
            console.warn('Missing Alipay configuration:', missingVars.join(', '));
        }
    }

    /**
     * Calculates total amount including Alipay processing fee
     * @param {number} baseAmount - Original amount before fees
     * @returns {number} Total amount including fees
     */
    calculateTotalWithFees(baseAmount) {
        const amount = parseFloat(baseAmount);
        return amount * (1 + this.feePercentage);
    }

    /**
     * Generates an Alipay-only payment link via Stripe
     * @param {Object} orderData - Order information including amount and reference
     * @returns {String} Checkout session URL
     */
    async generatePaymentLink(orderData) {
        try {
            console.log('\n=== Alipay Payment Processing ===');
            console.log('Generating Alipay payment link for order:', orderData.trade_order);

            // Calculate total amount including Alipay fee
            const baseAmount = parseFloat(orderData.total_price);
            const totalWithFees = this.calculateTotalWithFees(baseAmount);
            const amountInCents = Math.round(totalWithFees * 100);

            console.log('Alipay payment calculation:', {
                baseAmount,
                feePercentage: this.feePercentage,
                totalWithFees,
                amountInCents
            });

            const payload = {
                mode: 'payment',
                success_url: this.successUrl,
                cancel_url: this.cancelUrl,
                payment_method_types: ['alipay'],
                currency: 'nzd',

                line_items: [{
                    price_data: {
                        currency: 'nzd',
                        product_data: {
                            name: orderData.product_name_full || 'Gold Purchase',
                            description: `Order: ${orderData.trade_order} (Includes Alipay fee)`
                        },
                        unit_amount: amountInCents
                    },
                    quantity: 1
                }],

                customer_email: orderData.email_order || undefined,
                client_reference_id: orderData.trade_order,
                expires_at: Math.floor(Date.now() / 1000) + (30 * 60)
            };

            const response = await axios.post(
                `${this.baseUrl}/v1/checkout/sessions`,
                payload,
                {
                    headers: {
                        'Authorization': `Bearer ${this.secretKey}`,
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                }
            );

            console.log('Alipay Checkout Session created:', response.data.id);

            if (response.data && response.data.url) {
                // Store payment record
                const insertResult = await pool.query(
                    `INSERT INTO payments (
                        order_record_id, provider, status_url, amount, 
                        payment_url, payid, expires_at
                    ) VALUES ($1, $2, $3, $4, $5, $6, NOW() + interval '30 minutes')
                    RETURNING record_id`,
                    [
                        orderData.record_id,
                        'ALIPAY',
                        'success',
                        orderData.total_price,
                        response.data.url,
                        response.data.id
                    ]
                );

                // Schedule status checks at 1min and 3min after creation (for testing)
                schedulePaymentStatusChecks({
                    record_id: insertResult.rows[0].record_id,
                    provider: 'ALIPAY',
                    payid: response.data.id
                });

                return response.data.url;
            } else {
                throw new Error('Invalid response from Stripe for Alipay');
            }

        } catch (error) {
            console.error('\n=== Alipay API Error ===');
            console.error('Error details:', {
                message: error.message,
                response: error.response?.data,
                order: orderData.trade_order
            });

            // Store failed payment record
            await pool.query(
                `INSERT INTO payments (
                    order_record_id, provider, status_url, amount, message_url
                ) VALUES ($1, $2, $3, $4, $5)`,
                [
                    orderData.record_id,
                    'ALIPAY',
                    'failed',
                    orderData.total_price,
                    error.response?.data?.error?.message || error.message
                ]
            );

            throw error;
        }
    }
}

module.exports = new AlipayService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/btcpayService.js
/**
 * BTCPay Server Payment Integration
 */

const axios = require('axios');
const pool = require('../../config/database');
const { schedulePaymentStatusChecks } = require('./paystatus/paymentStatusQueue');

class BTCPayService {
    constructor() {
        // Remove trailing slash if present in API URL
        this.API_URL = process.env.BTCPAY_API_URL?.replace(/\/$/, '');
        this.API_KEY = process.env.BTCPAY_API_KEY;
        this.STORE_ID = process.env.BTCPAY_STORE_ID;

        // Validate configuration
        if (!this.API_URL || !this.API_KEY || !this.STORE_ID) {
            console.warn('BTCPay Server configuration incomplete');
        }
    }

    async generatePaymentLink(orderData) {
        try {
            console.log('\n=== BTCPay Payment Processing ===');
            console.log('Generating BTCPay invoice for order:', orderData.trade_order);

            // Format amount properly
            const formattedAmount = typeof orderData.total_price === 'string' 
                ? parseFloat(orderData.total_price).toFixed(2)
                : orderData.total_price.toFixed(2);

            const payload = {
                metadata: {
                    orderId: orderData.trade_order,
                    buyerName: orderData.first_name_order,
                    buyerEmail: orderData.email_order,
                    itemDesc: orderData.product_name_full || 'Gold Purchase'
                },
                amount: formattedAmount,
                currency: "NZD",
                checkout: {
                    speedPolicy: "MediumSpeed",
                    paymentMethods: ["BTC"],
                    redirectURL: process.env.BTCPAY_REDIRECT_URL,
                    defaultLanguage: "en"
                }
            };

            console.log('BTCPay request configuration:', {
                url: `${this.API_URL}/api/v1/stores/${this.STORE_ID}/invoices`,
                storeId: this.STORE_ID,
                authHeader: `token ${this.API_KEY}`
            });

            const response = await axios.post(
                `${this.API_URL}/api/v1/stores/${this.STORE_ID}/invoices`,
                payload,
                {
                    headers: {
                        'Authorization': `token ${this.API_KEY}`,
                        'Content-Type': 'application/json'
                    }
                }
            );

            console.log('BTCPay API Response:', response.data);

            if (response.data && response.data.checkoutLink) {
                // Store payment record
                const insertResult = await pool.query(
                    `INSERT INTO payments (
                        order_record_id, provider, status_url, amount, 
                        payment_url, payid
                    ) VALUES ($1, $2, $3, $4, $5, $6)
                    RETURNING record_id`,
                    [
                        orderData.record_id,
                        'BTCPAY',
                        'success',
                        formattedAmount,
                        response.data.checkoutLink,
                        response.data.id
                    ]
                );

                // Schedule status checks at 1min and 3min after creation (for testing)
                schedulePaymentStatusChecks({
                    record_id: insertResult.rows[0].record_id,
                    provider: 'BTCPAY',
                    payid: response.data.id
                });

                return response.data.checkoutLink;
            } else {
                throw new Error('Invalid response from BTCPay Server');
            }

        } catch (error) {
            console.error('\n=== BTCPay API Error ===');
            console.error('Error details:', {
                message: error.message,
                response: error.response?.data,
                order: orderData.trade_order,
                config: error.config
            });

            // Store failed payment record
            await pool.query(
                `INSERT INTO payments (
                    order_record_id, provider, status_url, amount, message_url
                ) VALUES ($1, $2, $3, $4, $5)`,
                [
                    orderData.record_id,
                    'BTCPAY',
                    'failed',
                    orderData.total_price,
                    error.response?.data?.message || error.message
                ]
            );

            throw error;
        }
    }
}

module.exports = new BTCPayService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/payments/paymentService.js
/**
 * Payment Service
 * --------------
 * Purpose: Handles payment status checking
 * Role: Provides business logic for payment status
 * 
 * Key Functions:
 * - Check payment status by token
 * 
 * Dependencies:
 * - Database pool for queries
 * 
 * Supported Payment Methods:
 * - POLi Payments
 * - Blink Payments
 * - BTCPay (Bitcoin)
 * - Stripe (Credit Card)
 * - Alipay (via Stripe)
 */

const pool = require('../../config/database');

class PaymentService {
    /**
     * Gets payment status and available payment URLs by token
     * Includes all available payment methods for the order
     * @param {string} token - Order token
     * @returns {Object} Payment status and available payment URLs
     */
    async getStatusByToken(token) {
        console.log('Checking payment status for token:', token);

        const query = `
            SELECT 
                p.payment_url,
                p.status_url,
                p.created_at,
                p.message_url,
                p.provider,
                p.expires_at
            FROM payments p
            JOIN orders o ON o.record_id = p.order_record_id
            WHERE o.token = $1
            AND p.status_url = 'success'
            AND (p.expires_at IS NULL OR p.expires_at > NOW())
            ORDER BY p.created_at DESC
        `;

        try {
            const result = await pool.query(query, [token]);
            console.log('Payment status results:', result.rows);

            // If no payment records found
            if (!result.rows.length) {
                return { 
                    status: 'pending',
                    message: 'Payment processing' 
                };
            }

            // Create an object to hold payment URLs for all providers
            const paymentUrls = {};
            
            // Process all successful payment records
            result.rows.forEach(row => {
                if (row.status_url === 'success' && row.payment_url) {
                    paymentUrls[row.provider] = {
                        payment_url: row.payment_url,
                        provider: row.provider,
                        expires_at: row.expires_at
                    };
                }
            });

            return {
                status: 'success',
                payments: paymentUrls,
                checked_at: new Date().toISOString()
            };

        } catch (error) {
            console.error('Database error in getStatusByToken:', error);
            throw new Error('Failed to check payment status');
        }
    }

    /**
     * Utility method to format expiry timestamp
     * @private
     * @param {Date} date - Expiry date
     * @returns {string} Formatted timestamp
     */
    _formatExpiryTime(date) {
        return date.toISOString();
    }

    /**
     * Checks if a payment URL has expired
     * @private
     * @param {Date} expiryDate - Payment URL expiry date
     * @returns {boolean} True if expired
     */
    _isExpired(expiryDate) {
        return new Date() > new Date(expiryDate);
    }
}

module.exports = new PaymentService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/expiry/providers/blinkExpiry.js
const axios = require('axios');

class BlinkExpiryProvider {
    constructor() {
        this.baseUrl = process.env.BLINK_API_BASE_URL;
    }

    async revokePayment(payid, token) {
        try {
            console.log(`Revoking Blink payment: ${payid}`);
            
            await axios.delete(
                `${this.baseUrl}/quick-payments/${payid}`,
                {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                }
            );

            console.log(`Successfully revoked Blink payment: ${payid}`);
            return true;
        } catch (error) {
            console.error(`Failed to revoke Blink payment ${payid}:`, error.response?.data || error.message);
            throw error;
        }
    }
}

module.exports = new BlinkExpiryProvider();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/expiry/expiryQueue.js
const Queue = require('bull');

const expiryQueue = new Queue('payment-expiry', process.env.REDIS_URL, {
    defaultJobOptions: {
        attempts: 3,
        backoff: {
            type: 'exponential',
            delay: 1000 // 1 second initial delay
        }
    }
});

// Log events for monitoring
expiryQueue.on('completed', job => {
    console.log(`Payment expiry job completed: ${job.id} for ${job.data.provider} payment ${job.data.payid}`);
});

expiryQueue.on('failed', (job, error) => {
    console.error(`Payment expiry job failed: ${job.id} for ${job.data.provider} payment ${job.data.payid}`, error);
});

module.exports = expiryQueue;----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/expiry/test-queue.js
require('dotenv').config();
const Queue = require('bull');

// Create a test queue
const testQueue = new Queue('test-queue', process.env.REDIS_URL);

// Add a test job
testQueue.add({ message: 'Test job' }, { delay: 5000 }); // 5 second delay

// Process jobs
testQueue.process(async (job) => {
    console.log('Processing job:', job.data.message);
    return { done: true };
});

// Listen for completed jobs
testQueue.on('completed', (job, result) => {
    console.log('Job completed with result:', result);
    process.exit(0);
});

console.log('Test started - waiting 5 seconds for job to process...');----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/expiry/expiryService.js
/*
----------------------------------------------
commented out service. empty service below to not start the expiry checker 
---------------------------------------------------

const pool = require('../../config/database');
const expiryQueue = require('./expiryQueue');
const blinkExpiry = require('./providers/blinkExpiry');
const blinkService = require('../payments/blinkService'); // Changed to use instance

class PaymentExpiryService {
    constructor() {
        this.setupQueueProcessor();
    }

    setupQueueProcessor() {
        expiryQueue.process(async (job) => {
            const { payid, provider } = job.data;
            console.log(`Processing expiry for ${provider} payment ${payid}`);
            
            try {
                await this.processExpiry(payid, provider);
                return { success: true, payid, provider };
            } catch (error) {
                // Check if error is due to payment already being expired or invalid
                if (error.response?.status === 404 || error.response?.status === 410) {
                    console.log(`Payment ${payid} already expired or invalid`);
                    await this.updatePaymentStatus(payid, 'expired', 'Payment already expired');
                    return { success: true, payid, provider, status: 'already_expired' };
                }

                console.error(`Expiry processing failed for ${payid}:`, error);
                throw error;
            }
        });
    }

    async updatePaymentStatus(payid, status, message) {
        const client = await pool.connect();
        try {
            await client.query(
                `UPDATE payments 
                 SET status = $1, 
                     error_message = $2
                 WHERE payid = $3`,
                [status, message, payid]
            );
        } finally {
            client.release();
        }
    }

    async processExpiry(payid, provider) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');

            // Get payment details
            const { rows } = await client.query(
                'SELECT * FROM payments WHERE payid = $1 AND provider = $2',
                [payid, provider]
            );

            if (!rows.length) {
                throw new Error(`Payment ${payid} not found`);
            }

            const payment = rows[0];

            // Only process if payment is still active
            if (payment.status === 'success') {
                // Handle provider-specific revocation
                switch (provider) {
                    case 'BLINK':
                        const token = await blinkService.ensureValidToken();
                        await blinkExpiry.revokePayment(payid, token);
                        break;
                    default:
                        throw new Error(`Unsupported payment provider: ${provider}`);
                }

                // Update payment status
                await client.query(
                    `UPDATE payments 
                     SET status = 'expired', 
                         error_message = 'Payment link expired'
                     WHERE payid = $1`,
                    [payid]
                );

                console.log(`Successfully expired ${provider} payment ${payid}`);
            } else {
                console.log(`Payment ${payid} already in ${payment.status} status, skipping expiry`);
            }

            await client.query('COMMIT');
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    async scheduleExpiry(payid, provider) {
        // Set expiry slightly shorter than Blink's expiry to ensure we revoke first
        const expiryMinutes = (parseInt(process.env.BLINK_PAYMENT_EXPIRY_MINUTES) || 30) - 2;
        
        console.log(`Scheduling expiry for ${provider} payment ${payid} in ${expiryMinutes} minutes`);
        
        // Schedule job
        await expiryQueue.add(
            { payid, provider },
            { 
                delay: expiryMinutes * 60 * 1000,
                jobId: `${provider}-${payid}`,
                attempts: 3,
                backoff: {
                    type: 'exponential',
                    delay: 1000
                }
            }
        );

        console.log(`Expiry scheduled for ${provider} payment ${payid}`);
    }
}

module.exports = new PaymentExpiryService();


*/


const pool = require('../../config/database');
const blinkExpiry = require('./providers/blinkExpiry');
const blinkService = require('../payments/blinkService'); // Changed to use instance

class PaymentExpiryService {
    constructor() {
        this.setupQueueProcessor();
    }

    setupQueueProcessor() {
        // No processing setup required as we are disabling the expiry queue
    }

    async updatePaymentStatus(payid, status, message) {
        const client = await pool.connect();
        try {
            await client.query(
                `UPDATE payments 
                 SET status = $1, 
                     error_message = $2
                 WHERE payid = $3`,
                [status, message, payid]
            );
        } finally {
            client.release();
        }
    }

    async processExpiry(payid, provider) {
        const client = await pool.connect();
        
        try {
            await client.query('BEGIN');

            // Get payment details
            const { rows } = await client.query(
                'SELECT * FROM payments WHERE payid = $1 AND provider = $2',
                [payid, provider]
            );

            if (!rows.length) {
                throw new Error(`Payment ${payid} not found`);
            }

            const payment = rows[0];

            // Only process if payment is still active
            if (payment.status === 'success') {
                // Handle provider-specific revocation
                switch (provider) {
                    case 'BLINK':
                        const token = await blinkService.ensureValidToken();
                        await blinkExpiry.revokePayment(payid, token);
                        break;
                    default:
                        throw new Error(`Unsupported payment provider: ${provider}`);
                }

                // Update payment status
                await client.query(
                    `UPDATE payments 
                     SET status = 'expired', 
                         error_message = 'Payment link expired'
                     WHERE payid = $1`,
                    [payid]
                );

                console.log(`Successfully expired ${provider} payment ${payid}`);
            } else {
                console.log(`Payment ${payid} already in ${payment.status} status, skipping expiry`);
            }

            await client.query('COMMIT');
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    async scheduleExpiry(payid, provider) {
        // This method is intentionally left blank to disable expiry scheduling
    }
}

module.exports = new PaymentExpiryService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/orders/orderService.js
/**
 * Order Service Module
 * ===================
 * This service handles the creation and management of orders in the system.
 * It provides functionality for:
 * - Generating unique trade order numbers
 * - Creating new orders with customer and product details
 * - Managing order transactions with database integration
 * - Generating payment links through multiple payment providers
 * 
 * Key Requirements:
 * - PostgreSQL database connection
 * - JWT for token generation
 * - POLi payment service integration
 * - Blink payment service integration
 * - BTCPay Server integration for Bitcoin payments
 * - Stripe payment service integration
 * - Alipay payment service integration
 * - Environment variables for JWT secret
 */

const pool = require('../../config/database');
const jwt = require('jsonwebtoken');
const PoliService = require('../payments/poliService');
const BlinkService = require('../payments/blinkService');
const BTCPayService = require('../payments/btcpayService');
const StripeService = require('../payments/stripeService');
const AlipayService = require('../payments/alipayService');

class OrderService {
    /**
     * Generates the next sequential trade order number
     * Formats: "TO-XXXX" where XXXX is an incrementing number
     * Default starts at TO-2317 if no previous orders exist
     */
    async getNextTradeOrder() {
        const result = await pool.query("SELECT trade_order FROM orders ORDER BY record_id DESC LIMIT 1");

        // ⚠️ CONFIGURE: Change starting number if needed
        const DEFAULT_START = "TO-2317";

        if (result.rows.length === 0 || !result.rows[0].trade_order || result.rows[0].trade_order.trim() === "") {
            return DEFAULT_START;
        }

        const lastTradeOrder = result.rows[0].trade_order.trim();

        if (typeof lastTradeOrder === "string" && lastTradeOrder.startsWith("TO-")) {
            const lastNumber = parseInt(lastTradeOrder.replace("TO-", ""), 10);
            return `TO-${lastNumber + 1}`;
        }

        return DEFAULT_START;
    }

    /**
     * Creates a new order in the system
     * @param {Object} orderData - Contains all order details including customer info and product details
     * @returns {Object} Contains generated token and trade order number
     */
    async createOrder(orderData) {
        const {
            first_name_order, email_order, total_price, // Required fields
            last_name_order, phone_order, product_name_full, quantity, price_nzd,
            zoho_id, delivery, pay_in_person, checkbox_order, address, message,
            date_picker_order, time_picker_order
        } = orderData;

        // Input validation for required fields
        if (!first_name_order || !email_order || !total_price) {
            throw new Error("First name, email, and total price are required.");
        }

        const trade_order = await this.getNextTradeOrder();

        // Database transaction handling
        const client = await pool.connect();
        try {
            await client.query('BEGIN');

            // Generate JWT token for order tracking
            const token = jwt.sign(
                { trade_order, email_order, timestamp: Date.now() },
                process.env.JWT_SECRET || "default_secret",
                { expiresIn: "1h" }
            );

            // Insert order into database
            const orderResult = await client.query(
                `INSERT INTO orders (
                    trade_order, first_name_order, last_name_order, email_order, phone_order,
                    product_name_full, total_price, quantity, price_nzd, zoho_id, delivery,
                    pay_in_person, checkbox_order, address, message, token,
                    date_picker_order, time_picker_order
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18)
                RETURNING record_id, order_creation_time`,
                [
                    trade_order, first_name_order, last_name_order || null, email_order, phone_order || null,
                    product_name_full || null, total_price, quantity || null, price_nzd || null, zoho_id || null,
                    delivery || null, pay_in_person || null, checkbox_order || null, address || null,
                    message || null, token, date_picker_order || null, time_picker_order || null
                ]
            );

            await client.query('COMMIT');

            // Prepare order data for payment processing
            const orderWithId = {
                ...orderData,
                record_id: orderResult.rows[0].record_id,
                trade_order
            };

            // Format timestamp for New Zealand timezone
            const timestamp = orderResult.rows[0].order_creation_time;
            const formattedDate = new Date(timestamp).toLocaleString('en-NZ', {
                timeZone: 'Pacific/Auckland',
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            }).replace(/\//g, '-');

            // Asynchronously generate payment links
            this.generatePaymentLinks(orderWithId);

            return { token, trade_order, order_creation_time: formattedDate };

        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    }

    /**
     * Generates payment links through multiple payment providers
     * Runs asynchronously to not block the order creation process
     * Handles all payment processing in parallel
     * @param {Object} orderData - Complete order information including record_id
     */
    async generatePaymentLinks(orderData) {
        try {
            console.log('\n=== Starting Payment Processing ===');
            console.log('Processing order:', orderData.trade_order);
            
            await Promise.all([
                // POLi payment processing
                (async () => {
                    try {
                        await PoliService.generatePaymentLink(orderData);
                    } catch (error) {
                        console.error('POLi processing failed:', error.message);
                    }
                })(),
                // Blink payment processing
                (async () => {
                    try {
                        await BlinkService.generatePaymentLink(orderData);
                    } catch (error) {
                        console.error('Blink processing failed:', error.message);
                    }
                })(),
                // BTCPay processing
                (async () => {
                    try {
                        if (process.env.BTCPAY_API_KEY && process.env.BTCPAY_STORE_ID) {
                            await BTCPayService.generatePaymentLink(orderData);
                        } else {
                            console.log('BTCPay configuration not found, skipping Bitcoin payment processing');
                        }
                    } catch (error) {
                        console.error('BTCPay processing failed:', error.message);
                    }
                })(),
                // Stripe payment processing
                (async () => {
                    try {
                        if (process.env.STRIPE_SECRET_KEY) {
                            await StripeService.generatePaymentLink(orderData);
                        } else {
                            console.log('Stripe configuration not found, skipping Stripe payment processing');
                        }
                    } catch (error) {
                        console.error('Stripe processing failed:', error.message);
                    }
                })(),
                // Alipay processing
                (async () => {
                    try {
                        if (process.env.STRIPE_ALIPAY_FEE) {
                            await AlipayService.generatePaymentLink(orderData);
                        } else {
                            console.log('Alipay configuration not found, skipping Alipay payment processing');
                        }
                    } catch (error) {
                        console.error('Alipay processing failed:', error.message);
                    }
                })()
            ]);

            console.log('=== Payment Processing Complete ===\n');
        } catch (error) {
            console.error('Payment link generation failed:', error);
            // Don't throw - this is background processing
        }
    }
}

module.exports = new OrderService();----------------------------------------

=== File: package.json ===
{
  "name": "mware3",
  "version": "1.0.0",
  "description": "Middleware for Webflow Integration",
  "main": "server.js",
  "engines": {
    "node": "20.18.1"
  },
  "scripts": {
    "start": "node server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "middleware",
    "webflow",
    "nodejs"
  ],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "axios": "^1.3.4",
    "bull": "^4.16.5",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "ejs": "^3.1.10",
    "express": "^4.18.2",
    "express-basic-auth": "^1.2.1",
    "express-rate-limit": "^7.5.0",
    "ioredis": "^5.5.0",
    "jsonwebtoken": "^9.0.0",
    "pg": "^8.10.0",
    "puppeteer": "^24.2.0"
  }
}
----------------------------------------
