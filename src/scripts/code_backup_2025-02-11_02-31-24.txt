Code Output Generated at UTC: 2025-02-11_02-31-24
Generated by: codespace
----------------------------------------

=== File: /workspaces/mware3/server.js ===
/**
 * Main Application Entry Point
 * --------------------------
 * Purpose: Initializes and configures the Express application
 * Role: Sets up middleware, routes, and starts the server
 * 
 * Key Components:
 * 1. Environment variables loading
 * 2. CORS configuration
 * 3. Route registration
 * 4. Server initialization
 * 
 * Dependencies:
 * - dotenv for environment variables
 * - express for web server
 * - cors for Cross-Origin Resource Sharing
 * 
 * IMPORTANT CONFIGURATIONS:
 * - PORT in .env file (defaults to 3000)
 * - Ensure all required environment variables are set in .env:
 *   - DATABASE_URL
 *   - JWT_SECRET
 *   - PORT (optional)
 */

require("dotenv").config();
const express = require("express");
const cors = require("cors");

// Import configurations
const corsOptions = require('./src/config/cors');

// Import routes
const orderRoutes = require('./src/routes/public/orders');

// Debug: Log environment variables
console.log('Environment:', {
    PORT: process.env.PORT,
    DATABASE_URL: process.env.DATABASE_URL ? 'Set' : 'Not Set',
    JWT_SECRET: process.env.JWT_SECRET ? 'Set' : 'Not Set'
});

// Debug: Log configurations
console.log('Loaded configurations:', {
    corsOptions,
    orderRoutes: typeof orderRoutes
});

const app = express();

// Middleware
app.use(cors(corsOptions));
app.use(express.json());

console.log('Middleware initialized');

// Routes
app.use("/", orderRoutes);  // Base URL for order routes

// Error handling middleware
app.use((err, req, res, next) => {
    console.error('Global error:', err);
    res.status(500).json({ error: "Server error" });
});

// ‚ö†Ô∏è CONFIGURE: Server port
const PORT = process.env.PORT || 3000;

// CRITICAL: Create server this way to handle shutdown
const server = app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
});

// Graceful Shutdown Handler
function gracefulShutdown() {
    console.log('Received kill signal, shutting down gracefully');
    server.close(() => {
        console.log('Closed out remaining connections');
        process.exit(0);
    });
    
    // Force close after 10 seconds
    setTimeout(() => {
        console.error('Could not close connections in time, forcefully shutting down');
        process.exit(1);
    }, 10000);
}

// Handle shutdown signals
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// Add basic health check endpoint
app.get('/health', (req, res) => {
    res.json({ status: 'ok', timestamp: new Date().toISOString() });
});----------------------------------------

=== File: /workspaces/mware3/.env ===
DATABASE_URL=postgres://postgres:Fish5590@@localhost:5432/railway_dev
JWT_SECRET=e6c22f31a8e14b6d4a6a7d43bde2f967892e3a1f542b84d0a7aebd6df8e8a2cd
----------------------------------------
-e 
=== File: /workspaces/mware3/src/routes/public/orders.js
/**
 * Order Routes
 * -----------
 * Purpose: Defines all HTTP endpoints related to orders
 * Role: Handles HTTP requests and delegates business logic to OrderService
 * 
 * Current Endpoints:
 * POST /create - Creates a new order
 * 
 * Dependencies:
 * - OrderService for business logic
 * - Express Router for routing
 * 
 * Error Handling:
 * - 400 for validation errors
 * - 500 for server errors
 */

const express = require('express');
const router = express.Router();
const OrderService = require('../../services/orders/orderService');

router.post("/create", async (req, res) => {
    try {
        const result = await OrderService.createOrder(req.body);
        res.json(result);
    } catch (error) {
        console.error("Order creation error:", error);
        res.status(error.message.includes("required") ? 400 : 500)
           .json({ error: error.message || "Failed to create order" });
    }
});

module.exports = router;----------------------------------------
-e 
=== File: /workspaces/mware3/src/scripts/project_code_output.sh
#!/bin/bash

# Create output file with timestamp
OUTPUT="/workspaces/mware3/src/scripts/code_backup_$(date -u +"%Y-%m-%d_%H-%M-%S").txt"

# Write header
echo "Code Output Generated at UTC: $(date -u +"%Y-%m-%d_%H-%M-%S")" > "$OUTPUT"
echo "Generated by: $USER" >> "$OUTPUT"
echo "----------------------------------------" >> "$OUTPUT"

# First add server.js and .env from root
if [ -f "/workspaces/mware3/server.js" ]; then
    echo -e "\n=== File: /workspaces/mware3/server.js ===" >> "$OUTPUT"
    cat "/workspaces/mware3/server.js" >> "$OUTPUT"
    echo "----------------------------------------" >> "$OUTPUT"
fi

if [ -f "/workspaces/mware3/.env" ]; then
    echo -e "\n=== File: /workspaces/mware3/.env ===" >> "$OUTPUT"
    cat "/workspaces/mware3/.env" >> "$OUTPUT"
    echo "----------------------------------------" >> "$OUTPUT"
fi

# Then add all files from /src
find /workspaces/mware3/src -type f -exec sh -c '
    echo -e "\n=== File: {}" >> '$OUTPUT'
    cat {} >> '$OUTPUT'
    echo "----------------------------------------" >> '$OUTPUT'
' \;

echo "Backup complete! Saved to: $OUTPUT"----------------------------------------
-e 
=== File: /workspaces/mware3/src/scripts/code_backup_2025-02-11_02-31-24.txt
----------------------------------------
-e 
=== File: /workspaces/mware3/src/config/cors.js
/**
 * CORS Configuration
 * -----------------
 * Purpose: Defines Cross-Origin Resource Sharing (CORS) settings
 * Role: Controls which domains can access your API
 * 
 * IMPORTANT CONFIGURATION:
 * - origin: Change this URL when deploying to different environments
 * - methods: HTTP methods allowed
 * - allowedHeaders: Headers clients can send
 */

const corsOptions = {
    // ‚ö†Ô∏è CONFIGURE: Change this URL for different environments
    origin: "https://gold-buyers-christchurch.webflow.io",
    methods: "GET,POST,OPTIONS",
    allowedHeaders: "Content-Type",

    
};
module.exports = corsOptions;

----------------------------------------
-e 
=== File: /workspaces/mware3/src/config/database.js
/**
 * Database Configuration
 * ---------------------
 * Purpose: Centralizes database connection configuration
 * Role: Provides a single connection pool instance used throughout the application
 * 
 * Dependencies:
 * - pg (PostgreSQL client)
 * - DATABASE_URL environment variable
 * 
 * IMPORTANT CONFIGURATION:
 * The DATABASE_URL should be set in your .env file with format:
 * postgresql://username:password@host:port/database
 */

const { Pool } = require("pg");

const pool = new Pool({ 
    connectionString: process.env.DATABASE_URL 
});

module.exports = pool;----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/pdf/pdfService.js
/**
 * PDF Generation Service
 * ---------------------
 * Purpose: Handles PDF generation for order confirmations
 * Role: Creates PDFs from order data using Puppeteer
 * 
 * Dependencies:
 * - puppeteer for PDF generation
 * - Requires Chrome/Chromium to be installed in the environment
 */

const puppeteer = require('puppeteer');

class PDFService {
    async generateOrderPDF(orderData) {
        const browser = await puppeteer.launch({
            args: ['--no-sandbox', '--disable-setuid-sandbox'],
            headless: 'new'  // Using new headless mode
        });

        try {
            const page = await browser.newPage();
            
            // TODO: Replace with your actual order page URL
            // await page.goto('https://your-webflow-print-page-url');
            
            // TODO: Add logic to populate order data
            
            const pdf = await page.pdf({
                format: 'A4',
                printBackground: true
            });

            return pdf;
        } finally {
            await browser.close();
        }
    }
}

module.exports = new PDFService();----------------------------------------
-e 
=== File: /workspaces/mware3/src/services/orders/orderService.js
const pool = require('../../config/database');
const jwt = require('jsonwebtoken');

class OrderService {
    async getNextTradeOrder() {
        const result = await pool.query("SELECT trade_order FROM orders ORDER BY record_id DESC LIMIT 1");

        // ‚ö†Ô∏è CONFIGURE: Change starting number if needed
        const DEFAULT_START = "TO-2317";

        if (result.rows.length === 0 || !result.rows[0].trade_order || result.rows[0].trade_order.trim() === "") {
            return DEFAULT_START;
        }

        const lastTradeOrder = result.rows[0].trade_order.trim();

        if (typeof lastTradeOrder === "string" && lastTradeOrder.startsWith("TO-")) {
            const lastNumber = parseInt(lastTradeOrder.replace("TO-", ""), 10);
            return `TO-${lastNumber + 1}`;
        }

        return DEFAULT_START;
    }

    async createOrder(orderData) {
        const {
            first_name_order, email_order, total_price, // Required fields
            last_name_order, phone_order, product_name_full, quantity, price_nzd,
            zoho_id, delivery, pay_in_person, checkbox_order, address, message,
            date_picker_order, time_picker_order
        } = orderData;

        // Validation
        if (!first_name_order || !email_order || !total_price) {
            throw new Error("First name, email, and total price are required.");
        }

        const trade_order = await this.getNextTradeOrder();

        // ‚ö†Ô∏è CONFIGURE: JWT settings
        const token = jwt.sign(
            { trade_order, email_order, timestamp: Date.now() }, 
            process.env.JWT_SECRET || "default_secret", 
            { expiresIn: "1h" }  // Modify token expiration time if needed
        );

        // Insert order
        await pool.query(
            `INSERT INTO orders (
                trade_order, first_name_order, last_name_order, email_order, phone_order,
                product_name_full, total_price, quantity, price_nzd, zoho_id, delivery,
                pay_in_person, checkbox_order, address, message, token,
                date_picker_order, time_picker_order
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18)`,
            [
                trade_order, first_name_order, last_name_order || null, email_order, phone_order || null,
                product_name_full || null, total_price, quantity || null, price_nzd || null, zoho_id || null,
                delivery || null, pay_in_person || null, checkbox_order || null, address || null,
                message || null, token, date_picker_order || null, time_picker_order || null
            ]
        );

        return { token, trade_order };
    }
}

module.exports = new OrderService();----------------------------------------
